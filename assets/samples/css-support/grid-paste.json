{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-paste-sample.component.ts","content":"import { Component, Directive, HostListener, ViewChild, ViewEncapsulation} from \"@angular/core\";\nimport {\n    CloseScrollStrategy,\n    ConnectedPositioningStrategy,\n    HorizontalAlignment,\n    IgxDropDownComponent,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    IgxGridComponent,\n    VerticalAlignment\n} from \"igniteui-angular\";\n\nimport { PasteHandler} from \"./paste-handler.directive\";\n\nimport { EXCEL_DATA, LOCAL_DATA } from \"./data\";\n\nimport { take } from \"rxjs/operators\";\n\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    selector: \"app-grid-paste-sample\",\n    styleUrls: [\"./grid-paste-sample.component.css\"],\n    templateUrl: \"./grid-paste-sample.component.html\"\n})\nexport class GridPasteSampleComponent {\n    @ViewChild(\"grid1\", { read: IgxGridComponent }) public grid1: IgxGridComponent;\n    @ViewChild(IgxDropDownComponent) public igxDropDown: IgxDropDownComponent;\n    public data;\n    public comboData = [\n        \"Paste data as new records\",\n        \"Paste starting from active cell\"\n   ];\n    public pasteMode = this.comboData[0];\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n    private _overlaySettings = {\n      closeOnOutsideClick: true,\n      modal: false,\n      positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n      scrollStrategy: new CloseScrollStrategy()\n  };\n\n    constructor(private excelExportService: IgxExcelExporterService) {\n        this.data = LOCAL_DATA;\n    }\n\n    public ngOnInit() {\n        this.grid1.verticalScrollContainer.onChunkLoad.pipe().subscribe(() => {\n            if (this.grid1.rowList) {\n                this.clearStyles();\n            }\n        });\n    }\n\n    public toggleDropDown(eventArgs) {\n        this._overlaySettings.positionStrategy.settings.target = eventArgs.target;\n        this.igxDropDown.toggle(this._overlaySettings);\n    }\n\n    public selectionChange(eventArgs) {\n        this.pasteMode = eventArgs.newSelection.elementRef.nativeElement.textContent.trim();\n    }\n\n    public dataPasted(processedData) {\n        if (this.pasteMode === \"Paste data as new records\") {\n            this.addRecords(processedData);\n        } else {\n            this.updateRecords(processedData);\n        }\n    }\n\n    public addRecords(processedData: any[]) {\n        const columns = this.grid1.visibleColumns;\n        const pk = this.grid1.primaryKey;\n        const addedData = [];\n        for (const curentDataRow of processedData) {\n            const rowData = {};\n            for (const col of columns) {\n                rowData[col.field] = curentDataRow[col.visibleIndex];\n            }\n            // generate PK\n            rowData[pk] = this.grid1.data.length + 1;\n            this.grid1.addRow(rowData);\n            addedData.push(rowData);\n            this.grid1.cdr.detectChanges();\n        }\n        // scroll to last added row\n        this.grid1.verticalScrollContainer.scrollTo(this.grid1.data.length);\n\n        this.grid1.verticalScrollContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n            this.clearStyles();\n            for (const data of addedData) {\n                const row = this.grid1.getRowByKey(data[pk]);\n                if (row) {\n                    row.nativeElement.style[\"font-style\"] = \"italic\";\n                    row.nativeElement.style.color = \"gray\";\n                }\n            }\n        });\n    }\n    public updateRecords(processedData: any[]) {\n        const cell = this.grid1.selectedCells[0];\n        const pk = this.grid1.primaryKey;\n        if (!cell) { return; }\n        const rowIndex = cell.row.index;\n        // const rowPkValue = cell.row.rowData[pk];\n        const cellIndex = cell.column.visibleIndex;\n        const columns = this.grid1.visibleColumns;\n        let index = 0;\n        const updatedRecsPK = [];\n        for (const curentDataRow of processedData) {\n            const rowData = {};\n            const dataRec = this.grid1.data[rowIndex + index];\n            const rowPkValue = dataRec ? dataRec[pk] : this.grid1.data.length + 1;\n            rowData[pk] = rowPkValue;\n            for (let j = 0; j < columns.length; j++) {\n                let currentCell;\n                if (j >= cellIndex) {\n                    currentCell = curentDataRow.shift();\n                }\n                const colKey = columns[j].field;\n                rowData[colKey] = currentCell || (!!dataRec ? dataRec[colKey] : null);\n            }\n            if (!dataRec) {\n                // no rec to update, add instead\n                rowData[pk] = rowPkValue;\n                this.grid1.addRow(rowData);\n                continue;\n            }\n            this.grid1.updateRow(rowData, rowPkValue);\n            this.grid1.cdr.detectChanges();\n            updatedRecsPK.push(rowPkValue);\n            index++;\n        }\n\n        this.clearStyles();\n        for (const pkVal of updatedRecsPK) {\n            const row = this.grid1.getRowByKey(pkVal);\n            if (row) {\n            row.nativeElement.style[\"font-style\"] = \"italic\";\n            row.nativeElement.style.color = \"gray\";\n            }\n        }\n    }\n\n    public downloadExcel(eventArgs) {\n        this.excelExportService.exportData(EXCEL_DATA, new IgxExcelExporterOptions(\"sample-data\"));\n    }\n\n    protected clearStyles() {\n        for (const row of this.grid1.rowList.toArray()) {\n            row.nativeElement.style[\"font-style\"] = \"\";\n            row.nativeElement.style.color = \"\";\n        }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-paste-sample.component.html","content":"<div class=\"grid__wrapper\">\n    <div class=\"grid__menu\">\n        <button igxButton=\"raised\" (click)=\"toggleDropDown($event)\">Paste Options</button>\n        <igx-drop-down (onSelection)=\"selectionChange($event)\">\n            <igx-drop-down-item *ngFor=\"let item of comboData\">\n                {{ item }}\n            </igx-drop-down-item>\n        </igx-drop-down>\n        <button id=\"download_excel\" igxButton=\"raised\" (click)=\"downloadExcel($event)\">Download Sample Excel File</button>\n    </div>\n    <igx-grid #grid1 [data]=\"data\" [width]=\"'100%'\" [height]=\"'480px'\" [autoGenerate]=\"false\" paste-handler (onDataProcessed)=\"dataPasted($event)\" [primaryKey]=\"'ID'\">\n        <igx-column [field]=\"'Name'\" width=\"25%\"></igx-column>\n        <igx-column [field]=\"'Title'\" width=\"25%\"></igx-column>\n        <igx-column [field]=\"'Phone'\" width=\"25%\"></igx-column>\n        <igx-column [field]=\"'Country'\" width=\"25%\"></igx-column>\n    </igx-grid>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-paste-sample.component.css","content":".grid-controls {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-between;\n  margin: 0 16px 24px; }\n  .grid-controls igx-switch {\n    margin-top: 24px; }\n\n.grid__wrapper {\n  width: 800px;\n  margin: 0 auto;\n  padding-left: 1%;\n  padding-right: 1%; }\n\n.grid__menu {\n  padding-bottom: 20px; }\n\n#download_excel {\n  float: right; }\n\n.header-icon {\n  font-size: 1.4em;\n  width: 1.1em;\n  height: 1.1em;\n  float: right;\n  cursor: pointer; }\n\n.header {\n  height: 100%; }\n\n.igx-grid__th .title {\n  width: 100%;\n  cursor: auto; }\n\n.igx-grid__td-text {\n  padding-right: 3px; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/data.ts","content":"/* tslint:disable:object-literal-sort-keys */\nexport const LOCAL_DATA = [{\n    Country: \"USA\",\n    ID: 1,\n    Name: \"Davolio, Nancy\",\n    Phone: \"(206) 555-9857\",\n    Title: \"Sales Representative\"\n},\n{\n    Country: \"USA\",\n    ID: 2,\n    Name: \"Fuller, Andrew\",\n    Phone: \"(206) 555-9482\",\n    Title: \"Vice President, Sales\"\n},\n{\n    Country: \"USA\",\n    ID: 3,\n    Name: \"Leverling, Janet\",\n    Phone: \"(206) 555-3412\",\n    Title: \"Sales Representative\"\n},\n{\n    Country: \"USA\",\n    ID: 4,\n    Name: \"Peacock, Margaret\",\n    Phone: \"(206) 555-8122\",\n    Title: \"Sales Representative\"\n},\n{\n    Country: \"UK\",\n    ID: 5,\n    Name: \"Buchanan, Steven\",\n    Phone: \"(71) 555-4848\",\n    Title: \"Sales Manager\"\n},\n{\n    Country: \"UK\",\n    ID: 6,\n    Name: \"Suyama, Michael\",\n    Phone: \"(71) 555-7773\",\n    Title: \"Sales Representative\"\n},\n{\n    Country: \"UK\",\n    ID: 7,\n    Name: \"King, Robert\",\n    Phone: \"(71) 555-5598\",\n    Title: \"Sales Representative\"\n},\n{\n    Country: \"USA\",\n    ID: 8,\n    Name: \"Callahan, Laura\",\n    Phone: \"(206) 555-1189\",\n    Title: \"Inside Sales Coordinator\"\n},\n{\n    Country: \"UK\",\n    ID: 9,\n    Name: \"Dodsworth, Anne\",\n    Phone: \"(71) 555-4444\",\n    Title: \"Sales Representative\"\n}\n];\n\nexport const EXCEL_DATA = [{\n    Name: \"Aaron Cruz\",\n    Title: \"VP Product Management\",\n    Phone: \"1-(402)296-1230\",\n    Country: \"US\"\n},\n{\n    Name: \"Benjamin Ortiz\",\n    Title: \"Sales Associate\",\n    Phone: \"1-(480)865-3285\",\n    Country: \"US\"\n},\n{\n    Name: \"Harry Hughes\",\n    Title: \"Accounting Assistant II\",\n    Phone: \"1-(405)281-1072\",\n    Country: \"US\"\n},\n{\n    Name: \"Evelyn Long\",\n    Title: \"Sales Manager\",\n    Phone: \"1-(757)668-2944\",\n    Country: \"US\"\n},\n{\n    Name: \"Craig Hawkins\",\n    Title: \"Budget/Accounting Analyst IV\",\n    Phone: \"44-(399)821-6896\",\n    Country: \"UK\"\n},\n{\n    Name: \"Teresa Arnold\",\n    Title: \"Research Assistant II\",\n    Phone: \"1-(605)205-6259\",\n    Country: \"US\"\n},\n{\n    Name: \"Sharon Boyd\",\n    Title: \"Sales Representative\",\n    Phone: \"1-(405)121-5974\",\n    Country: \"US\"\n},\n{\n    Name: \"Sandra Tucker\",\n    Title: \"Payment Adjustment Coordinator\",\n    Phone: \"1-(305)979-6420\",\n    Country: \"US\"\n},\n{\n    Name: \"Sean Cunningham\",\n    Title: \"Administrative Officer\",\n    Phone: \"1-(757)961-8538\",\n    Country: \"US\"\n}\n];\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/paste-handler.directive.ts","content":"import { Directive, EventEmitter, HostListener, Output} from \"@angular/core\";\n\n@Directive({ selector: \"[paste-handler]\" })\nexport class PasteHandler {\n    public textArea;\n\n    @Output()\n    public onDataProcessed = new EventEmitter<any>();\n\n    public ngOnInit(): void {\n        const div = document.createElement(\"div\");\n        const divStyle = div.style;\n        divStyle.position = \"fixed\";\n        document.body.appendChild(div);\n        this.textArea = document.createElement(\"textarea\");\n        const style = this.textArea.style;\n        style.opacity = \"0\";\n        style.height = \"0px\";\n        style.width = \"0px\";\n        style.overflow = \"hidden\";\n        div.appendChild(this.textArea);\n\n        this.textArea.addEventListener(\"paste\", (eventArgs) => { this.onPaste(eventArgs); });\n    }\n\n    @HostListener(\"focusin\", [\"$event\"])\n    public focusIn(eventArgs) {\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    public ControlV(eventArgs) {\n        const ctrl = eventArgs.ctrlKey;\n        const key = eventArgs.keyCode;\n        // Ctrl-V || Shift-Ins || Cmd-V\n        if ((ctrl || eventArgs.metaKey) && key === 86 || eventArgs.shiftKey && key === 45) {\n            this.textArea.focus();\n        }\n    }\n\n    public onPaste(eventArgs) {\n    let data;\n    const clData = \"clipboardData\";\n\n    // get clipboard data - from window.cliboardData for IE or from the original event's argumets.\n    if (window[clData]) {\n        window.event.returnValue = false;\n        data = window[clData].getData(\"text\");\n    } else {\n        data = eventArgs[clData].getData(\"text/plain\");\n    }\n\n    // process the clipboard data\n    const processedData = this.processData(data);\n\n    this.onDataProcessed.emit(processedData);\n    }\n\n    public processData(data) {\n        const pasteData = data.split(\"\\n\");\n        for (let i = 0; i < pasteData.length; i++) {\n            pasteData[i] = pasteData[i].split(\"\\t\");\n            // Check if last row is a dummy row\n            if (pasteData[pasteData.length - 1].length === 1 && pasteData[pasteData.length - 1][0] === \"\") {\n                pasteData.pop();\n            }\n            // remove empty data\n            if (pasteData.length === 1 &&\n                 pasteData[0].length === 1 &&\n                  (pasteData[0][0] === \"\" || pasteData[0][0] === \"\\r\")) {\n                    pasteData.pop();\n            }\n        }\n        return pasteData;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxExcelExporterService,\r\n\tIgxDropDownComponent,\r\n\tIgxDropDownModule,\r\n\tIgxButtonModule\r\n } from \"igniteui-angular\";\r\nimport { GridPasteSampleComponent } from \"./grid/grid-paste-sample.component\";\r\nimport { PasteHandler } from \"./grid/paste-handler.directive\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tGridPasteSampleComponent,\r\n\t\tPasteHandler\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxDropDownModule,\r\n\t\tIgxButtonModule\n  ],\n  providers: [IgxExcelExporterService],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-grid-paste-sample></app-grid-paste-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}