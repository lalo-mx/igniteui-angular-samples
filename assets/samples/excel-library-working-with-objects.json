{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.ts","content":"import {\n    AfterViewInit, ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef\n} from \"@angular/core\";\n\n// NOTE if needed, import either CategoryChart, DataChart, or Grid component:\n// import { IgxGridComponent } from \"igniteui-angular\";\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts/ES5/igx-category-chart-component\";\n// import { IgxDataChartComponent } from \"igniteui-angular-charts/ES5/igx-data-chart-component\";\n\n// TODO import Excel components that the sample will be showcasing:\nimport { TextFormatMode } from \"igniteui-angular-excel/ES5/TextFormatMode\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { Worksheet } from \"igniteui-angular-excel/ES5/Worksheet\";\nimport { WorksheetTable } from \"igniteui-angular-excel/ES5/WorksheetTable\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-objects\",\n    styleUrls: [\"./objects.component.scss\"],\n    templateUrl: \"./objects.component.html\"\n})\nexport class ExcelLibraryWorkingWithObjectsComponent implements AfterViewInit {\n\n    // TODO if needed, uncomment to get access to IG control\n    // @ViewChild(\"chart\")\n    // public chart: IgxCategoryChartComponent;\n    // @ViewChild(\"chart\")\n    // public chart: IgxDataChartComponent;\n    // @ViewChild(\"grid\")\n    // public chart: IgxGridComponent;\n\n    public data: any;\n\n    constructor() {\n\n        // TODO generate excel data or load data from .xls file\n        const usaMedals: any = [\n            { Year: \"1996\", UnitedStates: 148 },\n            { Year: \"2000\", UnitedStates: 142 },\n            { Year: \"2004\", UnitedStates: 134 },\n            { Year: \"2008\", UnitedStates: 131 },\n            { Year: \"2012\", UnitedStates: 135 },\n            { Year: \"2016\", UnitedStates: 146 }\n        ];\n        const chinaMedals: any = [\n            { Year: \"1996\", China: 110 },\n            { Year: \"2000\", China: 115 },\n            { Year: \"2004\", China: 121 },\n            { Year: \"2008\", China: 129 },\n            { Year: \"2012\", China: 115 },\n            { Year: \"2016\", China: 112 }\n        ];\n        const russiaMedals: any = [\n            { Year: \"1996\", Russia: 95 },\n            { Year: \"2000\", Russia: 91 },\n            { Year: \"2004\", Russia: 86 },\n            { Year: \"2008\", Russia: 65 },\n            { Year: \"2012\", Russia: 77 },\n            { Year: \"2016\", Russia: 88 }\n        ];\n        this.data = [ usaMedals, chinaMedals, russiaMedals ];\n    }\n\n    public ngOnInit() {\n    }\n\n    public ngAfterViewInit(): void {\n        // TODO bind excel data to the chart\n        // this.chart.dataSource = this.data;\n    }\n\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.html","content":"<div class=\"sample-wrapper container\">\n    <div class=\"options\">\n        <span>TODO: show usage of Objects and visualize it if needed </span>\n        <igx-category-chart\n            height=\"300px\" width=\"400px\"\n            #chart\n            [dataSource]=\"data\">\n        </igx-category-chart>\n\n\n    </div>\n\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.scss","content":".container {\n    display: flex;\n    flex-flow: column;\n    height: 100%;\n    min-width: 300px;\n}\n\n.options {\n    margin-top: 5px;\n    margin-bottom: 5px;\n    margin-right: 10px;\n    margin-left: 10px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithObjectsComponent } from \"./excel-library/working-with/objects.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryWorkingWithObjectsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-objects></app-objects>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}