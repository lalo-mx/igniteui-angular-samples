{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/grids.component.ts","content":"import { Component, OnInit, ViewChild } from \"@angular/core\";\n// importing IG components:\nimport { DefaultSortingStrategy, IgxGridComponent, SortingDirection } from \"igniteui-angular\";\nimport { FormatConditionIconSet } from \"igniteui-angular-excel/ES5/FormatConditionIconSet\";\n// importing IG utilities:\nimport {\n    IWorkbookExportEndedEventArgs,\n    WorkbookExportOptions,\n    WorkbookExportService\n} from \"../../utilities/excel-exporter\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    providers: [ WorkbookExportService ],\n    selector: \"app-grids\",\n    styleUrls: [\"./grids.component.scss\"],\n    templateUrl: \"./grids.component.html\"\n})\nexport class ExcelLibraryWorkingWithGridsComponent implements OnInit {\n\n    @ViewChild(\"grid\", { read: IgxGridComponent })\n    public grid: IgxGridComponent;\n    public data: any[];\n\n    constructor(private exporter: WorkbookExportService) {\n        this.initData();\n\n        exporter.onWorkbookExportEnded.subscribe({ next: (e: IWorkbookExportEndedEventArgs) => {\n            // the discontinued column shows a check/x icon so we can do that in the workbook\n            // using an icon conditional format\n            const iconRegion = e.getDataRegionFromHeader(\"Euro\");\n            if (iconRegion != null) {\n                const iconFormat = e.worksheet.conditionalFormats().addIconSetCondition(iconRegion.toString(),\n                FormatConditionIconSet.IconSet3Symbols);\n                iconFormat.showValue = false;\n            }\n            ExcelUtility.save(e.workbook, e.fileName);\n        }});\n    }\n\n    public exportGrid() {\n        const opt = new WorkbookExportOptions(\"ExcelWorkbooks\");\n        opt.exportAsTable = true;\n        // we want to create an icon set for the Euro field and excel\n        // conditional formatting doesn't work on boolean\n        opt.columnOptions = {\n            Euro : { valueFormatter: (v) => v === true ? 1 : v === false ? 0 : v }\n        };\n        this.exporter.export(this.grid, opt);\n    }\n\n    public ngOnInit() {\n        this.grid.sortingExpressions = [\n            { dir: SortingDirection.Asc, fieldName: \"ContactTitle\", ignoreCase: true,\n              strategy: DefaultSortingStrategy.instance() },\n            { dir: SortingDirection.Desc, fieldName: \"Country\", ignoreCase: true,\n              strategy: DefaultSortingStrategy.instance() }\n        ];\n    }\n\n    public initData(): void {\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\" ];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\" ];\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\" ];\n\n        const dataSource = new Array<any>();\n        // generating excel data source\n        for (let i = 0; i < 20; i++) {\n            const companyName = this.getItem(companies);\n            const contactTitle = this.getItem(titles);\n            const country = this.getItem(countries);\n            const city = this.getItem(cities);\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\n            const customerID = \"CID-\" + this.getRandom(500, 900);\n            const salary = this.getSalary(85000, 200000);\n            const age = this.getRandom(20, 65);\n            const isEuropean = country !== \"USA\" && country !== \"Brazil\";\n            const dataItem = {\n                Address: address,\n                Age: age,\n                City: city,\n                CompanyName: companyName,\n                ContactName: contactName,\n                ContactTitle: contactTitle,\n                Country: country,\n                Euro: isEuropean,\n                ID: customerID,\n                PostalCode: postalCode,\n                Salary: salary\n            };\n            dataSource.push(dataItem);\n        }\n        this.data = dataSource;\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n    public getSalary(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return \"$\" + s.replace(\".00\", \"\");\n    }\n}\n"},{"hasRelativeAssetsUrls":true,"path":"src/app/excel-library/working-with/grids.component.html","content":"<div class=\"sample-wrapper container\">\n    <div class=\"options\">\n        <button (click)=\"exportGrid()\">Export to Excel</button>\n    </div>\n    <igx-grid #grid [data]=\"data\" [autoGenerate]=\"false\" height=\"500px\" width=\"100%\">\n        <igx-column width=\"15%\" sortable=\"true\" field=\"CompanyName\" header=\"Company\"></igx-column>\n        <igx-column width=\"15%\" sortable=\"true\" field=\"ContactName\" header=\"Name\"></igx-column>\n        <igx-column width=\"15%\" sortable=\"true\" field=\"ContactTitle\" header=\"Title\"></igx-column>\n        <igx-column width=\"15%\" sortable=\"true\" field=\"Country\" header=\"Country\"></igx-column>\n        <igx-column width=\"10%\" sortable=\"true\" field=\"Euro\" header=\"Euro\" [dataType]=\"'boolean'\">\n            <ng-template igxCell let-cell=\"cell\" let-val>\n                <img *ngIf=\"val\"  title=\"Euro\" alt=\"Euro\"   src=\"https://www.infragistics.com/angular-demos/assets/images/grid/active.png\"  />\n                <img *ngIf=\"!val\" title=\"Other\" alt=\"Other\" src=\"https://www.infragistics.com/angular-demos/assets/images/grid/expired.png\"/>\n            </ng-template>\n        </igx-column>\n        <igx-column width=\"15%\" sortable=\"true\" field=\"Salary\" header=\"Salary\"></igx-column>\n        <igx-column width=\"10%\" sortable=\"true\" field=\"Age\" header=\"Age\"></igx-column>\n    </igx-grid>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/grids.component.scss","content":".container {\n    display: flex;\n    flex-flow: column;\n    height: 100%;\n    min-width: 300px;\n}\n\n.options {\n    margin-top: 5px;\n    margin-bottom: 5px;\n    margin-right: 10px;\n    margin-left: 10px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithGridsComponent } from \"./excel-library/working-with/grids.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryWorkingWithGridsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-grids></app-grids>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}