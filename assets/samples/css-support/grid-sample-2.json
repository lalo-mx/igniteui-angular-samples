{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-2/grid-sample-2.component.ts","content":"import { Component, Injectable, ViewChild } from \"@angular/core\";\n\nimport { IgxGridComponent } from \"igniteui-angular\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { FinancialData } from \"../services/financialData\";\n\n@Injectable()\nexport class LocalService {\n    public records: Observable<any[]>;\n    private _records: BehaviorSubject<any[]>;\n\n    constructor() {\n        this._records = new BehaviorSubject([]);\n        this.records = this._records.asObservable();\n    }\n\n    public getData(count: number = 100) {\n        const financialData: FinancialData = new FinancialData();\n        this._records.next(financialData.generateData(count));\n    }\n}\n\n@Component({\n    providers: [LocalService],\n    selector: \"grid-sample\",\n    styleUrls: [\"./grid-sample-2.component.css\"],\n    templateUrl: \"grid-sample-2.component.html\"\n})\n\nexport class FinancialSampleComponent {\n    @ViewChild(\"grid1\") public grid1: IgxGridComponent;\n    public data: Observable<any[]>;\n    constructor(private localService: LocalService) {\n        this.localService.getData(100000);\n        this.data = this.localService.records;\n    }\n    public ngOnInit(): void {\n    }\n    public formatNumber(value: number) {\n        return value.toFixed(2);\n    }\n    public formatCurrency(value: number) {\n        return \"$\" + value.toFixed(2);\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-2/grid-sample-2.component.html","content":"<div class=\"grid__wrapper\">\n    <igx-grid #grid1 [data]=\"data | async\" [height]=\"'500px'\" width=\"100%\" [autoGenerate]='false' [allowFiltering]=\"true\">\n        <igx-column [field]=\"'Category'\" [width]=\"'120px'\"></igx-column>\n        <igx-column [field]=\"'Type'\" [width]=\"'150px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Open Price'\" [width]=\"'120px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\">\n        </igx-column>\n        <igx-column [field]=\"'Price'\" [width]=\"'120px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Change'\" [width]=\"'120px'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\">\n            <ng-template igxHeader>\n                <span>Change</span>\n            </ng-template>\n\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>0\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<0\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>0\" [class.down]=\"val<0\">{{ formatNumber(val) }}</span>\n                </div>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'Change(%)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\">\n            <ng-template igxHeader>\n                <span>Change(%)</span>\n            </ng-template>\n\n            <ng-template igxCell let-val>\n                <span class=\"cellAlignSyle\" [class.up]=\"val>0\" [class.down]=\"val<0\">{{ formatNumber(val) }}%</span>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'Change On Year(%)'\" [width]=\"'150px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\">\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>0\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<0\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>0\" [class.down]=\"val<0\">{{ formatNumber(val) }}%</span>\n                </div>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'Buy'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Sell'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Spread'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\"></igx-column>\n        <igx-column [field]=\"'Volume'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\"></igx-column>\n        <igx-column [field]=\"'High(D)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Low(D)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'High(Y)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Low(Y)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n        <igx-column [field]=\"'Start(Y)'\" [width]=\"'130px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"></igx-column>\n    </igx-grid>\n    <br />\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-2/grid-sample-2.component.css","content":".cellAlignSyle {\n  text-align: right;\n  float: right; }\n\n.cellAlignSyle > span {\n  float: right; }\n\n.up {\n  color: green; }\n\n.down {\n  color: red; }\n\n.headerAlignSyle {\n  text-align: right !important; }\n\n.grid__wrapper {\n  margin: 0 auto;\n  padding: 5px; }\n\n.currency-badge-container {\n  width: 80px;\n  float: right; }\n\n.badge-left {\n  float: left; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/services/financialData.ts","content":"/* tslint:disable */\nexport const REGIONS: any[] = [\n    {\n        \"Region\": \"North America\",\n        \"Countries\": [ \"Canada\", \"United States\", \"Mexico\" ]\n    },\n    {\n        \"Region\": \"Middle East\",\n        \"Countries\": [ \"Turkey\", \"Iraq\", \"Saudi Arabia\", \"Syria\", \"UAE\", \"Israel\", \"Jordan\", \"Lebanon\", \"Oman\", \"Kuwait\", \"Qatar\", \"Bahrain\", \"Iran\" ]\n    },\n    {\n        \"Region\": \"Europe\",\n        \"Countries\": [ \"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\", \"Spain\", \"Poland\", \"Romania\", \"Netherlands\", \"Belgium\", \"Greece\",\n            \"Portugal\", \"Czech Republic\", \"Hungary\", \"Sweden\", \"Austria\", \"Switzerland\", \"Bulgaria\", \"Denmark\", \"Finland\", \"Slovakia\", \"Norway\",\n            \"Ireland\", \"Croatia\", \"Slovenia\", \"Estonia\", \"Iceland\",]\n    },\n    {\n        \"Region\": \"Africa\",\n        \"Countries\": [ \"Nigeria\", \"Ethiopia\", \"Egypt\", \"South Africa\", \"Algeria\", \"Morocco\", \"Cameroon\", \"Niger\", \"Senegal\", \"Tunisia\", \"Libya\"]\n    },\n    {\n        \"Region\": \"Asia Pacific\",\n        \"Countries\": [ \"Afghanistan\", \"Australia\", \"Azerbaijan\", \"China\", \"Hong Kong\", \"India\", \"Indonesia\",\n            \"Japan\", \"Malaysia\", \"New Zealand\", \"Pakistan\", \"Philippines\", \"Korea\", \"Singapore\", \"Taiwan\", \"Thailand\"]\n    },\n    {\n        \"Region\": \"South America\",\n        \"Countries\": [ \"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\" ]\n    },\n\n]\n\nexport const DealType: any[] = [\n    \"Buy\", \"Sell\"\n]\n\nexport const Contract: any[] = [\n    \"Forwards\", \"Futures\", \"Options\", \"Swap\", \"CFD\"\n]\n\nexport const Settlement: any[] = [\n    \"Deliverable\", \"Cash\"\n]\n\nexport const MOCKFINANCEDATA: any[] = [\n{\n    \"IndGrou\": \"Airlines\",\n    \"IndSect\": \"Consumer, Cyclical\",\n    \"IndSubg\": \"Airlines\",\n    \"SecType\": \"PUBLIC\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"CpnTyp\": \"FIXED\",\n    \"IssuerN\": \"AMERICAN AIRLINES GROUP\",\n    \"Moodys\": \"WR\",\n    \"Fitch\": \"N.A.\",\n    \"DBRS\": \"N.A.\",\n    \"CollatT\": \"NEW MONEY\",\n    \"Curncy\": \"USD\",\n    \"Security\": \"001765866 Pfd\",\n    \"sector\": \"Pfd\",\n    \"CUSIP\": \"1765866\",\n    \"Ticker\": \"AAL\",\n    \"Cpn\": \"7.875\",\n    \"Maturity\": \"7/13/1939\",\n    \"KRD_3YR\": 0.00006,\n    \"RISK_COUNTRY\": \"\",\n    \"MUNI_SECTOR\": \"\",\n    \"ZV_SPREAD\": 28.302,\n    \"KRD_5YR\": 0,\n    \"KRD_1YR\": -0.00187,\n    \"PD_WALA\": null\n}];\n\nexport const DATA: any[] = [\n {\n   \"Category\": \"Metal\",\n   \"Type\": \"Gold\",\n   \"Spread\": 0.01,\n   \"Open Price\": 1281.10,\n   \"Price\": 1280.7317,\n   \"Buy\": 1280.7267,\n   \"Sell\": 1280.7367,\n   \"Change\": -0.3683,\n   \"Change(%)\": -0.0287,\n   \"Volume\": 48387,\n   \"High(D)\": 1289.50,\n   \"Low(D)\": 1279.10,\n   \"High(Y)\": 1306,\n   \"Low(Y)\": 1047.20,\n   \"Start(Y)\": 1176.60,\n   \"Change On Year(%)\": 8.8502\n },\n {\n   \"Category\": \"Metal\",\n   \"Type\": \"Silver\",\n   \"Spread\": 0.01,\n   \"Open Price\": 17.43,\n   \"Price\": 17.42,\n   \"Buy\": 17.43,\n   \"Sell\": 17.43,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0574,\n   \"Volume\": 11720,\n   \"High(D)\": 17.51,\n   \"Low(D)\": 17.37,\n   \"High(Y)\": 18.06,\n   \"Low(Y)\": 13.73,\n   \"Start(Y)\": 15.895,\n   \"Change On Year(%)\": 9.5942\n },\n {\n   \"Category\": \"Metal\",\n   \"Type\": \"Copper\",\n   \"Spread\": 0.02,\n   \"Open Price\": 2.123,\n   \"Price\": 2.113,\n   \"Buy\": 2.123,\n   \"Sell\": 2.123,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.471,\n   \"Volume\": 28819,\n   \"High(D)\": 2.16,\n   \"Low(D)\": 2.11,\n   \"High(Y)\": 2.94,\n   \"Low(Y)\": 1.96,\n   \"Start(Y)\": 2.45,\n   \"Change On Year(%)\": -13.7551\n },\n {\n   \"Category\": \"Metal\",\n   \"Type\": \"Platinum\",\n   \"Spread\": 0.01,\n   \"Open Price\": 1071.60,\n   \"Price\": 1071.0993,\n   \"Buy\": 1071.0943,\n   \"Sell\": 1071.1043,\n   \"Change\": -0.5007,\n   \"Change(%)\": -0.0467,\n   \"Volume\": 3039,\n   \"High(D)\": 1081.20,\n   \"Low(D)\": 1070.50,\n   \"High(Y)\": 1120.60,\n   \"Low(Y)\": 812.40,\n   \"Start(Y)\": 966.50,\n   \"Change On Year(%)\": 10.8225\n },\n {\n   \"Category\": \"Metal\",\n   \"Type\": \"Palladium\",\n   \"Spread\": 0.01,\n   \"Open Price\": 600.55,\n   \"Price\": 601.0005,\n   \"Buy\": 600.9955,\n   \"Sell\": 601.0055,\n   \"Change\": 0.4505,\n   \"Change(%)\": 0.075,\n   \"Volume\": 651,\n   \"High(D)\": 607.20,\n   \"Low(D)\": 598.40,\n   \"High(Y)\": 690,\n   \"Low(Y)\": 458.6,\n   \"Start(Y)\": 574.3,\n   \"Change On Year(%)\": 4.6492\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Oil\",\n   \"Spread\": 0.015,\n   \"Open Price\": 45.54,\n   \"Price\": 45.7899,\n   \"Buy\": 45.7824,\n   \"Sell\": 45.7974,\n   \"Change\": 0.2499,\n   \"Change(%)\": 0.5487,\n   \"Volume\": 107196,\n   \"High(D)\": 45.94,\n   \"Low(D)\": 45.00,\n   \"High(Y)\": 65.28,\n   \"Low(Y)\": 30.79,\n   \"Start(Y)\": 48.035,\n   \"Change On Year(%)\": -4.6739\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Brent\",\n   \"Spread\": 0.01,\n   \"Open Price\": 46.06,\n   \"Price\": 46.05,\n   \"Buy\": 46.06,\n   \"Sell\": 46.06,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0217,\n   \"Volume\": 59818,\n   \"High(D)\": 46.48,\n   \"Low(D)\": 45.60,\n   \"High(Y)\": 71.14,\n   \"Low(Y)\": 30.02,\n   \"Start(Y)\": 50.58,\n   \"Change On Year(%)\": -8.9561\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Natural Gas\",\n   \"Spread\": 0.02,\n   \"Open Price\": 2.094,\n   \"Price\": 2.104,\n   \"Buy\": 2.094,\n   \"Sell\": 2.094,\n   \"Change\": 0.01,\n   \"Change(%)\": 0.4776,\n   \"Volume\": 2783,\n   \"High(D)\": 2.11,\n   \"Low(D)\": 2.09,\n   \"High(Y)\": 3.20,\n   \"Low(Y)\": 1.84,\n   \"Start(Y)\": 2.52,\n   \"Change On Year(%)\": -16.5079\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"RBOB Gas\",\n   \"Spread\": 0.015,\n   \"Open Price\": 1.5086,\n   \"Price\": 1.9532,\n   \"Buy\": 1.9457,\n   \"Sell\": 1.9607,\n   \"Change\": 0.4446,\n   \"Change(%)\": 29.4686,\n   \"Volume\": 2646,\n   \"High(D)\": 1.9532,\n   \"Low(D)\": 1.50,\n   \"High(Y)\": 2.05,\n   \"Low(Y)\": 1.15,\n   \"Start(Y)\": 1.60,\n   \"Change On Year(%)\": 22.0727\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Diesel\",\n   \"Spread\": 0.015,\n   \"Open Price\": 1.3474,\n   \"Price\": 1.3574,\n   \"Buy\": 1.3474,\n   \"Sell\": 1.3474,\n   \"Change\": 0.01,\n   \"Change(%)\": 0.7422,\n   \"Volume\": 2971,\n   \"High(D)\": 1.36,\n   \"Low(D)\": 1.34,\n   \"High(Y)\": 2.11,\n   \"Low(Y)\": 0.92,\n   \"Start(Y)\": 1.515,\n   \"Change On Year(%)\": -10.4026\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Ethanol\",\n   \"Spread\": 0.01,\n   \"Open Price\": 1.512,\n   \"Price\": 2.7538,\n   \"Buy\": 2.7488,\n   \"Sell\": 2.7588,\n   \"Change\": 1.2418,\n   \"Change(%)\": 82.1323,\n   \"Volume\": 14,\n   \"High(D)\": 2.7538,\n   \"Low(D)\": 1.1168,\n   \"High(Y)\": 2.7538,\n   \"Low(Y)\": 1.1168,\n   \"Start(Y)\": 1.475,\n   \"Change On Year(%)\": 86.7011\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Uranium\",\n   \"Spread\": 0.02,\n   \"Open Price\": 27.55,\n   \"Price\": 27.58,\n   \"Buy\": 27.55,\n   \"Sell\": 27.55,\n   \"Change\": 0.03,\n   \"Change(%)\": 0.1089,\n   \"Volume\": 12,\n   \"High(D)\": 27.55,\n   \"Low(D)\": 27.55,\n   \"High(Y)\": 29.32,\n   \"Low(Y)\": 21.28,\n   \"Start(Y)\": 25.30,\n   \"Change On Year(%)\": 9.0119\n },\n {\n   \"Category\": \"Oil\",\n   \"Type\": \"Coal\",\n   \"Spread\": 0.015,\n   \"Open Price\": 0.4363,\n   \"Price\": 0.4163,\n   \"Buy\": 0.4363,\n   \"Sell\": 0.4363,\n   \"Change\": -0.02,\n   \"Change(%)\": -4.584,\n   \"Volume\": 3,\n   \"High(D)\": 0.4363,\n   \"Low(D)\": 0.4363,\n   \"High(Y)\": 0.4841,\n   \"Low(Y)\": 0.3954,\n   \"Start(Y)\": 0.4398,\n   \"Change On Year(%)\": -5.3326\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Wheat\",\n   \"Spread\": 0.01,\n   \"Open Price\": 465.50,\n   \"Price\": 465.52,\n   \"Buy\": 465.50,\n   \"Sell\": 465.50,\n   \"Change\": 0.02,\n   \"Change(%)\": 0.0043,\n   \"Volume\": 4318,\n   \"High(D)\": 467.00,\n   \"Low(D)\": 463.25,\n   \"High(Y)\": 628.50,\n   \"Low(Y)\": 449.50,\n   \"Start(Y)\": 539.00,\n   \"Change On Year(%)\": -13.6327\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Corn\",\n   \"Spread\": 0.01,\n   \"Open Price\": 379.50,\n   \"Price\": 379.8026,\n   \"Buy\": 379.7976,\n   \"Sell\": 379.8076,\n   \"Change\": 0.3026,\n   \"Change(%)\": 0.0797,\n   \"Volume\": 11266,\n   \"High(D)\": 381.00,\n   \"Low(D)\": 377.75,\n   \"High(Y)\": 471.25,\n   \"Low(Y)\": 351.25,\n   \"Start(Y)\": 411.25,\n   \"Change On Year(%)\": -7.6468\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Sugar\",\n   \"Spread\": 0.01,\n   \"Open Price\": 15.68,\n   \"Price\": 14.6742,\n   \"Buy\": 14.6692,\n   \"Sell\": 14.6792,\n   \"Change\": -1.0058,\n   \"Change(%)\": -6.4146,\n   \"Volume\": 4949,\n   \"High(D)\": 15.70,\n   \"Low(D)\": 14.6742,\n   \"High(Y)\": 16.87,\n   \"Low(Y)\": 11.37,\n   \"Start(Y)\": 14.12,\n   \"Change On Year(%)\": 3.9249\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Soybean\",\n   \"Spread\": 0.01,\n   \"Open Price\": 1038.00,\n   \"Price\": 1038.6171,\n   \"Buy\": 1038.6121,\n   \"Sell\": 1038.6221,\n   \"Change\": 0.6171,\n   \"Change(%)\": 0.0595,\n   \"Volume\": 20356,\n   \"High(D)\": 1044.00,\n   \"Low(D)\": 1031.75,\n   \"High(Y)\": 1057.00,\n   \"Low(Y)\": 859.50,\n   \"Start(Y)\": 958.25,\n   \"Change On Year(%)\": 8.3869\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Soy oil\",\n   \"Spread\": 0.01,\n   \"Open Price\": 33.26,\n   \"Price\": 33.7712,\n   \"Buy\": 33.7662,\n   \"Sell\": 33.7762,\n   \"Change\": 0.5112,\n   \"Change(%)\": 1.5371,\n   \"Volume\": 10592,\n   \"High(D)\": 33.7712,\n   \"Low(D)\": 33.06,\n   \"High(Y)\": 35.43,\n   \"Low(Y)\": 26.61,\n   \"Start(Y)\": 31.02,\n   \"Change On Year(%)\": 8.8692\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Soy Meat\",\n   \"Spread\": 0.01,\n   \"Open Price\": 342.60,\n   \"Price\": 342.62,\n   \"Buy\": 342.60,\n   \"Sell\": 342.60,\n   \"Change\": 0.02,\n   \"Change(%)\": 0.0058,\n   \"Volume\": 5646,\n   \"High(D)\": 345.40,\n   \"Low(D)\": 340.30,\n   \"High(Y)\": 353.40,\n   \"Low(Y)\": 261.70,\n   \"Start(Y)\": 307.55,\n   \"Change On Year(%)\": 11.403\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"OJ Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 140.60,\n   \"Price\": 140.1893,\n   \"Buy\": 140.1843,\n   \"Sell\": 140.1943,\n   \"Change\": -0.4107,\n   \"Change(%)\": -0.2921,\n   \"Volume\": 7,\n   \"High(D)\": 140.1893,\n   \"Low(D)\": 0.00,\n   \"High(Y)\": 155.95,\n   \"Low(Y)\": 113.00,\n   \"Start(Y)\": 134.475,\n   \"Change On Year(%)\": 4.2493\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Coffee\",\n   \"Spread\": 0.01,\n   \"Open Price\": 125.70,\n   \"Price\": 125.69,\n   \"Buy\": 125.70,\n   \"Sell\": 125.70,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.008,\n   \"Volume\": 1654,\n   \"High(D)\": 125.80,\n   \"Low(D)\": 125.00,\n   \"High(Y)\": 155.75,\n   \"Low(Y)\": 115.35,\n   \"Start(Y)\": 135.55,\n   \"Change On Year(%)\": -7.2741\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Cocoa\",\n   \"Spread\": 0.01,\n   \"Open Price\": 3076.00,\n   \"Price\": 3076.03,\n   \"Buy\": 3076.00,\n   \"Sell\": 3076.00,\n   \"Change\": 0.03,\n   \"Change(%)\": 0.001,\n   \"Volume\": 978,\n   \"High(D)\": 3078.00,\n   \"Low(D)\": 3066.00,\n   \"High(Y)\": 3406.00,\n   \"Low(Y)\": 2746.00,\n   \"Start(Y)\": 3076.00,\n   \"Change On Year(%)\": 0.001\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Rice\",\n   \"Spread\": 0.01,\n   \"Open Price\": 11.245,\n   \"Price\": 10.4154,\n   \"Buy\": 10.4104,\n   \"Sell\": 10.4204,\n   \"Change\": -0.8296,\n   \"Change(%)\": -7.3779,\n   \"Volume\": 220,\n   \"High(D)\": 11.38,\n   \"Low(D)\": 10.4154,\n   \"High(Y)\": 14.14,\n   \"Low(Y)\": 9.70,\n   \"Start(Y)\": 11.92,\n   \"Change On Year(%)\": -12.6228\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Oats\",\n   \"Spread\": 0.01,\n   \"Open Price\": 194.50,\n   \"Price\": 194.2178,\n   \"Buy\": 194.2128,\n   \"Sell\": 194.2228,\n   \"Change\": -0.2822,\n   \"Change(%)\": -0.1451,\n   \"Volume\": 64,\n   \"High(D)\": 195.75,\n   \"Low(D)\": 194.00,\n   \"High(Y)\": 241.25,\n   \"Low(Y)\": 183.75,\n   \"Start(Y)\": 212.50,\n   \"Change On Year(%)\": -8.6034\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Milk\",\n   \"Spread\": 0.01,\n   \"Open Price\": 12.87,\n   \"Price\": 12.86,\n   \"Buy\": 12.87,\n   \"Sell\": 12.87,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0777,\n   \"Volume\": 7,\n   \"High(D)\": 12.89,\n   \"Low(D)\": 12.81,\n   \"High(Y)\": 16.96,\n   \"Low(Y)\": 12.81,\n   \"Start(Y)\": 14.885,\n   \"Change On Year(%)\": -13.6043\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Cotton\",\n   \"Spread\": 0.01,\n   \"Open Price\": 61.77,\n   \"Price\": 61.76,\n   \"Buy\": 61.77,\n   \"Sell\": 61.77,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0162,\n   \"Volume\": 3612,\n   \"High(D)\": 62.06,\n   \"Low(D)\": 61.32,\n   \"High(Y)\": 67.59,\n   \"Low(Y)\": 54.33,\n   \"Start(Y)\": 60.96,\n   \"Change On Year(%)\": 1.3123\n },\n {\n   \"Category\": \"Agriculture\",\n   \"Type\": \"Lumber\",\n   \"Spread\": 0.01,\n   \"Open Price\": 303.90,\n   \"Price\": 304.5994,\n   \"Buy\": 304.5944,\n   \"Sell\": 304.6044,\n   \"Change\": 0.6994,\n   \"Change(%)\": 0.2302,\n   \"Volume\": 2,\n   \"High(D)\": 304.5994,\n   \"Low(D)\": 303.90,\n   \"High(Y)\": 317.10,\n   \"Low(Y)\": 236.00,\n   \"Start(Y)\": 276.55,\n   \"Change On Year(%)\": 10.1426\n },\n {\n   \"Category\": \"Livestock\",\n   \"Type\": \"LV Cattle\",\n   \"Spread\": 0.01,\n   \"Open Price\": 120.725,\n   \"Price\": 120.705,\n   \"Buy\": 120.725,\n   \"Sell\": 120.725,\n   \"Change\": -0.02,\n   \"Change(%)\": -0.0166,\n   \"Volume\": 4,\n   \"High(D)\": 120.725,\n   \"Low(D)\": 120.725,\n   \"High(Y)\": 147.98,\n   \"Low(Y)\": 113.90,\n   \"Start(Y)\": 130.94,\n   \"Change On Year(%)\": -7.8166\n },\n {\n   \"Category\": \"Livestock\",\n   \"Type\": \"FD Cattle\",\n   \"Spread\": 0.01,\n   \"Open Price\": 147.175,\n   \"Price\": 148.6065,\n   \"Buy\": 148.6015,\n   \"Sell\": 148.6115,\n   \"Change\": 1.4315,\n   \"Change(%)\": 0.9727,\n   \"Volume\": 5,\n   \"High(D)\": 148.6065,\n   \"Low(D)\": 147.175,\n   \"High(Y)\": 190.00,\n   \"Low(Y)\": 138.10,\n   \"Start(Y)\": 164.05,\n   \"Change On Year(%)\": -9.4139\n },\n {\n   \"Category\": \"Livestock\",\n   \"Type\": \"Lean Hogs\",\n   \"Spread\": 0.01,\n   \"Open Price\": 81.275,\n   \"Price\": 81.8146,\n   \"Buy\": 81.8096,\n   \"Sell\": 81.8196,\n   \"Change\": 0.5396,\n   \"Change(%)\": 0.664,\n   \"Volume\": 1,\n   \"High(D)\": 81.8146,\n   \"Low(D)\": 81.275,\n   \"High(Y)\": 83.98,\n   \"Low(Y)\": 70.25,\n   \"Start(Y)\": 77.115,\n   \"Change On Year(%)\": 6.0943\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"USD IDX Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 93.88,\n   \"Price\": 93.7719,\n   \"Buy\": 93.7619,\n   \"Sell\": 93.7819,\n   \"Change\": -0.1081,\n   \"Change(%)\": -0.1151,\n   \"Volume\": 5788,\n   \"High(D)\": 94.05,\n   \"Low(D)\": 93.7534,\n   \"High(Y)\": 100.70,\n   \"Low(Y)\": 91.88,\n   \"Start(Y)\": 96.29,\n   \"Change On Year(%)\": -2.6151\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"USD/JPY Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 9275.50,\n   \"Price\": 9277.3342,\n   \"Buy\": 9277.3242,\n   \"Sell\": 9277.3442,\n   \"Change\": 1.8342,\n   \"Change(%)\": 0.0198,\n   \"Volume\": 47734,\n   \"High(D)\": 9277.3342,\n   \"Low(D)\": 0.93,\n   \"High(Y)\": 9483.00,\n   \"Low(Y)\": 0.93,\n   \"Start(Y)\": 4741.965,\n   \"Change On Year(%)\": 95.6432\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"GBP/USD Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 1.4464,\n   \"Price\": 1.1941,\n   \"Buy\": 1.1841,\n   \"Sell\": 1.2041,\n   \"Change\": -0.2523,\n   \"Change(%)\": -17.4441,\n   \"Volume\": 29450,\n   \"High(D)\": 1.45,\n   \"Low(D)\": 1.1941,\n   \"High(Y)\": 1.59,\n   \"Low(Y)\": 1.1941,\n   \"Start(Y)\": 1.485,\n   \"Change On Year(%)\": -19.59\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"AUD/USD Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 0.7344,\n   \"Price\": 0.7444,\n   \"Buy\": 0.7344,\n   \"Sell\": 0.7344,\n   \"Change\": 0.01,\n   \"Change(%)\": 1.3617,\n   \"Volume\": 36764,\n   \"High(D)\": 0.74,\n   \"Low(D)\": 0.73,\n   \"High(Y)\": 0.79,\n   \"Low(Y)\": 0.68,\n   \"Start(Y)\": 0.735,\n   \"Change On Year(%)\": 1.2789\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"USD/CAD Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 0.7744,\n   \"Price\": 0.9545,\n   \"Buy\": 0.9445,\n   \"Sell\": 0.9645,\n   \"Change\": 0.1801,\n   \"Change(%)\": 23.2622,\n   \"Volume\": 13669,\n   \"High(D)\": 0.9545,\n   \"Low(D)\": 0.77,\n   \"High(Y)\": 0.9545,\n   \"Low(Y)\": 0.68,\n   \"Start(Y)\": 0.755,\n   \"Change On Year(%)\": 26.4295\n },\n {\n   \"Category\": \"Currencies\",\n   \"Type\": \"USD/CHF Future\",\n   \"Spread\": 0.02,\n   \"Open Price\": 1.0337,\n   \"Price\": 1.0437,\n   \"Buy\": 1.0337,\n   \"Sell\": 1.0337,\n   \"Change\": 0.01,\n   \"Change(%)\": 0.9674,\n   \"Volume\": 5550,\n   \"High(D)\": 1.03,\n   \"Low(D)\": 1.03,\n   \"High(Y)\": 1.11,\n   \"Low(Y)\": 0.98,\n   \"Start(Y)\": 1.045,\n   \"Change On Year(%)\": -0.1244\n },\n {\n   \"Category\": \"Index\",\n   \"Type\": \"DOW Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 17711.00,\n   \"Price\": 17712.1515,\n   \"Buy\": 17712.1465,\n   \"Sell\": 17712.1565,\n   \"Change\": 1.1515,\n   \"Change(%)\": 0.0065,\n   \"Volume\": 22236,\n   \"High(D)\": 17727.00,\n   \"Low(D)\": 17642.00,\n   \"High(Y)\": 18083.00,\n   \"Low(Y)\": 15299.00,\n   \"Start(Y)\": 16691.00,\n   \"Change On Year(%)\": 6.118\n },\n {\n   \"Category\": \"Index\",\n   \"Type\": \"S&P Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 2057.50,\n   \"Price\": 2056.6018,\n   \"Buy\": 2056.5968,\n   \"Sell\": 2056.6068,\n   \"Change\": -0.8982,\n   \"Change(%)\": -0.0437,\n   \"Volume\": 142780,\n   \"High(D)\": 2059.50,\n   \"Low(D)\": 2049.00,\n   \"High(Y)\": 2105.50,\n   \"Low(Y)\": 1794.50,\n   \"Start(Y)\": 1950.00,\n   \"Change On Year(%)\": 5.4668\n },\n {\n   \"Category\": \"Index\",\n   \"Type\": \"NAS Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 4341.25,\n   \"Price\": 4341.28,\n   \"Buy\": 4341.25,\n   \"Sell\": 4341.25,\n   \"Change\": 0.03,\n   \"Change(%)\": 0.0007,\n   \"Volume\": 18259,\n   \"High(D)\": 4347.00,\n   \"Low(D)\": 4318.00,\n   \"High(Y)\": 4719.75,\n   \"Low(Y)\": 3867.75,\n   \"Start(Y)\": 4293.75,\n   \"Change On Year(%)\": 1.107\n },\n {\n   \"Category\": \"Index\",\n   \"Type\": \"S&P MID MINI\",\n   \"Spread\": 0.01,\n   \"Open Price\": 1454.30,\n   \"Price\": 1455.7812,\n   \"Buy\": 1455.7762,\n   \"Sell\": 1455.7862,\n   \"Change\": 1.4812,\n   \"Change(%)\": 0.1018,\n   \"Volume\": 338,\n   \"High(D)\": 1455.7812,\n   \"Low(D)\": 1448.00,\n   \"High(Y)\": 1527.30,\n   \"Low(Y)\": 1236.00,\n   \"Start(Y)\": 1381.65,\n   \"Change On Year(%)\": 5.3654\n },\n {\n   \"Category\": \"Index\",\n   \"Type\": \"S&P 600 MINI\",\n   \"Spread\": 0.01,\n   \"Open Price\": 687.90,\n   \"Price\": 687.88,\n   \"Buy\": 687.90,\n   \"Sell\": 687.90,\n   \"Change\": -0.02,\n   \"Change(%)\": -0.0029,\n   \"Volume\": 0,\n   \"High(D)\": 0.00,\n   \"Low(D)\": 0.00,\n   \"High(Y)\": 620.32,\n   \"Low(Y)\": 595.90,\n   \"Start(Y)\": 608.11,\n   \"Change On Year(%)\": 13.1177\n },\n {\n   \"Category\": \"Interest Rate\",\n   \"Type\": \"US 30YR Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 164.875,\n   \"Price\": 164.1582,\n   \"Buy\": 164.1532,\n   \"Sell\": 164.1632,\n   \"Change\": -0.7168,\n   \"Change(%)\": -0.4347,\n   \"Volume\": 28012,\n   \"High(D)\": 165.25,\n   \"Low(D)\": 164.0385,\n   \"High(Y)\": 169.38,\n   \"Low(Y)\": 151.47,\n   \"Start(Y)\": 160.425,\n   \"Change On Year(%)\": 2.3271\n },\n {\n   \"Category\": \"Interest Rate\",\n   \"Type\": \"US 2Y Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 109.3984,\n   \"Price\": 109.3884,\n   \"Buy\": 109.3984,\n   \"Sell\": 109.3984,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0091,\n   \"Volume\": 17742,\n   \"High(D)\": 109.41,\n   \"Low(D)\": 109.38,\n   \"High(Y)\": 109.80,\n   \"Low(Y)\": 108.62,\n   \"Start(Y)\": 109.21,\n   \"Change On Year(%)\": 0.1634\n },\n {\n   \"Category\": \"Interest Rate\",\n   \"Type\": \"US 10YR Future\",\n   \"Spread\": 0.01,\n   \"Open Price\": 130.5625,\n   \"Price\": 130.5825,\n   \"Buy\": 130.5625,\n   \"Sell\": 130.5625,\n   \"Change\": 0.02,\n   \"Change(%)\": 0.0153,\n   \"Volume\": 189310,\n   \"High(D)\": 130.63,\n   \"Low(D)\": 130.44,\n   \"High(Y)\": 132.64,\n   \"Low(Y)\": 125.48,\n   \"Start(Y)\": 129.06,\n   \"Change On Year(%)\": 1.1797\n },\n {\n   \"Category\": \"Interest Rate\",\n   \"Type\": \"Euro$ 3M\",\n   \"Spread\": 0.01,\n   \"Open Price\": 99.18,\n   \"Price\": 99.17,\n   \"Buy\": 99.18,\n   \"Sell\": 99.18,\n   \"Change\": -0.01,\n   \"Change(%)\": -0.0101,\n   \"Volume\": 29509,\n   \"High(D)\": 99.18,\n   \"Low(D)\": 99.17,\n   \"High(Y)\": 99.38,\n   \"Low(Y)\": 98.41,\n   \"Start(Y)\": 98.895,\n   \"Change On Year(%)\": 0.2781\n }\n];\ninterface IResponse {\n    data: any[];\n    recordsUpdated: number;\n  }\n/* tslint:enable */\nexport class FinancialData {\n    public generateData(count: number): any[] {\n        const currData = [];\n        for (let i = 0; i < count; i++) {\n            const rand = Math.floor(Math.random() * Math.floor(DATA.length));\n            const dataObj = Object.assign({}, DATA[rand]);\n\n            dataObj.Settlement = Settlement[this.generateRandomNumber(0, 1)];\n            dataObj.Contract = Contract[this.generateRandomNumber(0, 4)];\n            const region = REGIONS[this.generateRandomNumber(0, 5)];\n            dataObj.Region = region.Region;\n            dataObj.Country = this.randomizeCountry(region);\n            // for (let y = 0; y < 80; y++) {\n            //     dataObj[\"Text\" + y] = \"Text\";\n            // }\n\n            for (const mockData of MOCKFINANCEDATA) {\n                for (const prop in mockData) {\n                    if (mockData.hasOwnProperty(prop)) {\n                        dataObj[prop] = mockData[prop];\n                    }\n                }\n            }\n\n            dataObj.ID = i;\n            this.randomizeObjectData(dataObj);\n            currData.push(dataObj);\n        }\n        return currData;\n    }\n    public updateAllPrices(data: any[]): any[] {\n        const currData = [];\n        for (const dataRow of data) {\n          const dataObj = Object.assign({}, dataRow);\n          this.randomizeObjectData(dataObj);\n          currData.push(dataObj);\n        }\n        return currData;\n      }\n\n    public updateRandomPrices(data: any[]): any {\n        const currData = data.slice(0, data.length + 1);\n        let y = 0;\n        for (let i = Math.round(Math.random() * 10); i < data.length; i += Math.round(Math.random() * 10)) {\n          const dataObj = Object.assign({}, data[i]);\n          this.randomizeObjectData(dataObj);\n          currData[i] = dataObj;\n          y++;\n        }\n       // return {data: currData, recordsUpdated: y };\n        return currData;\n      }\n    public updateRandomPrices2(data: any[]): IResponse {\n        const currData = data.slice(0, data.length + 1);\n        let y = 0;\n        for (let i = Math.round(Math.random() * 10); i < data.length; i += Math.round(Math.random() * 10)) {\n          const dataObj = Object.assign({}, data[i]);\n          this.randomizeObjectData(dataObj);\n          currData[i] = dataObj;\n          y++;\n        }\n        return {data: currData, recordsUpdated: y };\n      }\n    private randomizeObjectData(dataObj) {\n        const changeP = \"Change(%)\";\n        const res = this.generateNewPrice(dataObj.Price);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n    }\n    private generateNewPrice(oldPrice): any {\n        const rnd = parseFloat(Math.random().toFixed(2));\n        const volatility = 2;\n        let newPrice = 0;\n\n        let changePercent = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n\n        const changeAmount = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n\n        const result = {Price: 0, ChangePercent: 0};\n        result.Price = parseFloat(newPrice.toFixed(2));\n        result.ChangePercent = parseFloat(changePercent.toFixed(2));\n\n        return result;\n    }\n    private generateRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    private randomizeCountry(region: any) {\n        let country;\n        switch (region.Region) {\n            case \"North America\": {\n               country = region.Countries[this.generateRandomNumber(0, 2)];\n               break;\n            }\n            case \"South America\": {\n                country = region.Countries[this.generateRandomNumber(0, 11)];\n                break;\n            }\n            case \"Europe\": {\n                country = region.Countries[this.generateRandomNumber(0, 26)];\n                break;\n            }\n            case \"Asia Pacific\": {\n                country = region.Countries[this.generateRandomNumber(0, 15)];\n                break;\n            }\n            case \"Africa\": {\n                country = region.Countries[this.generateRandomNumber(0, 11)];\n                break;\n            }\n            case \"Middle East\": {\n                country = region.Countries[this.generateRandomNumber(0, 12)];\n                break;\n            }\n         }\n        return country;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { \r\n\tIgxAvatarModule,\r\n\tIgxBadgeModule,\r\n\tIgxButtonModule,\r\n\tIgxGridModule,\r\n\tIgxIconModule,\r\n\tIgxInputGroupModule,\r\n\tIgxProgressBarModule,\r\n\tIgxRippleModule,\r\n\tIgxSwitchModule\r\n } from \"igniteui-angular\";\r\nimport { \r\n\tFinancialSampleComponent,\r\n\tLocalService\r\n } from \"./grid/grid-sample-2/grid-sample-2.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tFinancialSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxAvatarModule,\r\n\t\tIgxBadgeModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxGridModule.forRoot(),\r\n\t\tIgxIconModule,\r\n\t\tIgxInputGroupModule,\r\n\t\tIgxProgressBarModule,\r\n\t\tIgxRippleModule,\r\n\t\tIgxSwitchModule,\r\n\t\tHttpClientModule\n  ],\n  providers: [LocalService],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<grid-sample></grid-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}