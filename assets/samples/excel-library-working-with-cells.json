{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.ts","content":"import {\n    Component, ComponentFactoryResolver,\n    Injector, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\n// importing IG components:\nimport { CellReferenceMode } from \"igniteui-angular-excel/ES5/CellReferenceMode\";\nimport { WorksheetMergedCellsRegion} from \"igniteui-angular-excel/ES5/excel.core\";\nimport { FormattedString } from \"igniteui-angular-excel/ES5/FormattedString\";\nimport { Formula } from \"igniteui-angular-excel/ES5/Formula\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { Worksheet } from \"igniteui-angular-excel/ES5/Worksheet\";\nimport { WorksheetCellComment } from \"igniteui-angular-excel/ES5/WorksheetCellComment\";\nimport {\n    WorkbookExportService\n} from \"../../utilities/excel-exporter\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    providers: [ WorkbookExportService ],\n    selector: \"app-cells\",\n    styleUrls: [\"./cells.component.scss\"],\n    templateUrl: \"./cells.component.html\"\n})\nexport class ExcelLibraryWorkingWithCellsComponent implements OnInit {\n\n    @ViewChild(\"gridContainer\", {read: ViewContainerRef})\n    public gridContainerRef: ViewContainerRef;\n    public canSave = false;\n    public wb: Workbook;\n    public ws: Worksheet;\n    public worksheetRegion: string[];\n    public selectedRegion: string;\n    public cellFeatures: string[];\n\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {\n    }\n\n    public ngOnInit() {\n        this.workbookCreate();\n    }\n    public workbookSave(): void {\n        if (this.canSave) {\n            ExcelUtility.save(this.wb, \"ExcelWorkbook\").then((f) => {\n                console.log(\"Saved:\" + f);\n            }, (e) => {\n                console.error(\"ExcelUtility.Save Error:\" + e);\n            });\n        }\n    }\n    public workbookParse(wb: Workbook): void {\n        if (wb === undefined) {\n            this.worksheetRegion = null;\n            this.selectedRegion = null;\n        } else {\n            const names = new Array<string>();\n            for (const ws of wb.worksheets()) {\n                for (const tbl of ws.tables()) {\n                    names.push(ws.name + \" - \" + tbl.name);\n                }\n            }\n            this.worksheetRegion = names;\n            this.selectedRegion = names.length > 0 ? names[0] : null;\n        }\n        this.wb = wb;\n        this.canSave = wb != null;\n    }\n    public workbookCreate(): void {\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const employeeSheet = wb.worksheets().add(\"Employees\");\n        const employeeHeader = employeeSheet.rows(0);\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\n        const titles = [\"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" ];\n        const employeeColumns = [\"Name\", \"Company\", \"Title\", \"Age\", \"Country\"];\n        for (let col = 0; col < employeeColumns.length; col++) {\n            employeeSheet.columns(col).width = 5000;\n            employeeHeader.setCellValue(col, employeeColumns[col]);\n        }\n        for (let i = 1; i < 20; i++) {\n            const company = this.getItem(companies);\n            const title = this.getItem(titles);\n            const country = this.getItem(countries);\n            const name = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const salary = this.getRandom(45000, 95000);\n            const age = this.getRandom(20, 65);\n            const wr = employeeSheet.rows(i);\n            wr.setCellValue(0, name);\n            wr.setCellValue(1, company);\n            wr.setCellValue(2, title);\n            wr.setCellValue(3, age);\n            wr.setCellValue(4, country);\n            wr.setCellValue(5, salary);\n        }\n        const expanseSheet = wb.worksheets().add(\"Expanses\");\n        const expanseHeader = expanseSheet.rows(0);\n        const expanseNames = [\"Year\", \"Computers\", \"Research\", \"Travel\", \"Salary\", \"Software\" ];\n        let expanseCol = 0;\n        for (const key of expanseNames) {\n            expanseSheet.columns(expanseCol).width = 5000;\n            expanseHeader.setCellValue(expanseCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = expanseSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(expanseCol, 2010 + i);\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(expanseCol, this.getAmount(50000, 65000));\n                } else if (key === \"Research\") {\n                    wr.setCellValue(expanseCol, this.getAmount(150000, 165000));\n                } else if (key === \"Travel\") {\n                    wr.setCellValue(expanseCol, this.getAmount(20000, 25000));\n                } else if (key === \"Salary\") {\n                    wr.setCellValue(expanseCol, this.getAmount(4000000, 450000));\n                } else if (key === \"Software\") {\n                    wr.setCellValue(expanseCol, this.getAmount(100000, 150000));\n                }\n            }\n            expanseCol++;\n        }\n        const incomeSheet = wb.worksheets().add(\"Income\");\n        const incomeHeader = incomeSheet.rows(0);\n        const incomeNames = [\"Year\", \"Phones\", \"Computers\", \"Software\", \"Services\", \"Royalties\" ];\n        let incomeCol = 0;\n        for (const key of incomeNames) {\n            incomeSheet.columns(incomeCol).width = 5000;\n            incomeHeader.setCellValue(incomeCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = incomeSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(incomeCol, 2010 + i);\n                } else if (key === \"Software\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 850000));\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(incomeCol, this.getAmount(250000, 265000));\n                } else if (key === \"Royalties\") {\n                    wr.setCellValue(incomeCol, this.getAmount(400000, 450000));\n                } else if (key === \"Phones\") {\n                    wr.setCellValue(incomeCol, this.getAmount(6000000, 650000));\n                } else if (key === \"Services\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 750000));\n                }\n            }\n            incomeCol++;\n        }\n        this.workbookParse(wb);\n    }\n    public onCommentChanged(input: HTMLInputElement): void {\n        const ws = this.wb.worksheets(0);\n        const wr = ws.rows(0);\n        const d = new WorksheetCellComment();\n        const formatted = new FormattedString(\"This cell has a reference name.\");\n        if (input.checked === true) {\n            // Cell Comment\n            d.text = formatted;\n            wr.cells(0).comment = d;\n        } else {\n            wr.cells(0).comment = null;\n        }\n    }\n    public onFormulaChanged(input: HTMLInputElement): void {\n        // Cell Formula\n        const ws = this.wb.worksheets(0);\n        let formula: Formula;\n        if (input.checked === true) {\n            // Using a Formula object to apply a formula\n            formula = Formula.parse(\"=AVERAGE(F2:F20)\", CellReferenceMode.A1);\n            formula.applyTo(ws.rows(21).cells(5));\n            ws.rows(20).cells(5).value = \"Average Salary\";\n        } else {\n            if (ws.rows(21).cells(5).formula != null) {\n                formula = ws.rows(21).cells(5).formula;\n            }\n            if (formula != null) {\n                ws.rows(21).cells(5).value = null;\n                ws.rows(20).cells(5).value = null;\n            }\n        }\n    }\n    public onMergeChanged(input: HTMLInputElement): void {\n        let mergedRegion: WorksheetMergedCellsRegion;\n        if (input.checked === true) {\n            // Using merge cells\n             this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).mergedCellsRegions().add(2, 2, 4, 2);\n             mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\n        } else {\n            if (this.wb.worksheets(0).mergedCellsRegions().count === 1) {\n                    mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\n                }\n            if (mergedRegion != null) {\n                this.wb.worksheets(0).mergedCellsRegions().removeAt(0);\n                this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\n                this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\n                this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\n            }\n        }\n    }\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n    public getAmount(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return s;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.html","content":"<div class=\"sample-wrapper container\">\n    <div class=\"cellOptions\">\n\n        <div class=\"workbookOperations\">         \n            <button class=\"workbookButton\" (click)=\"workbookSave()\" [disabled]=\"!canSave\">\n                <label>Save Workbook</label>\n            </button>           \n        </div>       \n        <div class=\"cellFeatures\">\n            <label class=\"label\">Add a Comment to cell A1: </label> \n            <input type=\"checkbox\" id=\"addComment\" (change)='onCommentChanged($event.target)'> <br/>\n            <label class=\"label\">Add a Formula for cells F2 to F20: </label> \n            <input type=\"checkbox\" id=\"addFormula\" (change)='onFormulaChanged($event.target)'>  <br/>\n            <label class=\"label\">Merge Cells: </label>\n            <input type=\"checkbox\" id=\"mergeCells\" (change)='onMergeChanged($event.target)'> \n        </div>\n    </div>\n\n\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.scss","content":".cellOptions {\n    display: \"block\";\n    width: 100%;\n}\n\n.workbookOperations {\n    width: 160px;\n    padding-left: 5px;\n    padding-right: 5px;\n    float:left;\n}\n\n.workbookDetails {\n    float:left;\n    width: 35%;\n    height: 100px;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.cellFeatures {\n    float:left;\n    width: 35%;\n    height: 100px;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.workbookDetails > select {\n    display: inline-block;\n    width: 100%;\n    height: 90px;\n}\n\n.label {\n    margin-top: 8px;\n    font-weight: bold;\n}\n\n.workbookPreview {\n    display: inline-block;\n    padding-left: 5px;\n    padding-right: 5px;\n    width: 100%;\n    height: 200px;\n}\n\n.workbookButton {\n    display: block;\n    width: 150px;\n    margin-top: 5px;\n}\n\n.workbookSelector {\n    display: inline-block;\n    width: 150px;\n    margin-top: 5px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithCellsComponent } from \"./excel-library/working-with/cells.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryWorkingWithCellsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-cells></app-cells>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}