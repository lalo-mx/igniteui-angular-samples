{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.ts","content":"import { AfterViewInit, ChangeDetectionStrategy, Component} from \"@angular/core\";\nimport { ChartType } from \"igniteui-angular-excel/ES5/ChartType\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorksheetRegion } from \"igniteui-angular-excel/ES5/WorksheetRegion\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-charts\",\n    styleUrls: [\"./charts.component.css\"],\n    templateUrl: \"./charts.component.html\"\n})\nexport class ExcelLibraryWorkingWithChartsComponent implements AfterViewInit {\n\n    public excelData: any[];\n    public chartData: any[];\n\n    constructor() {\n        this.initializeData();\n    }\n\n    public initializeData() {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ];\n        const groups = [\"Heating\", \"Electricity\", \"Water\", \"Taxes\"];\n\n        const expanseKey = \"Expense\";\n        const monthKey = \"Month\";\n        const data = new Array<any>();\n        // generating excel data source\n        for (const group of groups) {\n            const r = {};\n            r[expanseKey] = group;\n            let index = 0;\n            for (const month of months) {\n                const x = index * 15 * Math.PI / 180;\n                const rand = this.getRandom(50, 100);\n                const heat = Math.abs(Math.cos(x)) * 300 + rand;\n                const ac = Math.abs(Math.sin(x)) * 500 + rand;\n                if (group === \"Heating\") {\n                    r[month] = Math.round(heat);\n                } else if (group === \"Electricity\") {\n                    r[month] = Math.round(ac);\n                } else if (group === \"Water\") {\n                    r[month] = this.getRandom(100, 150);\n                } else if (group === \"Taxes\") {\n                    r[month] = this.getRandom(700, 800);\n                }\n                index = index + 1;\n            }\n            data.push(r);\n        }\n        this.excelData = data;\n        // since we will export the data transposed (plotByRows will be true)\n        // if we want to show the data that way in the ui then we need a transposed\n        // version of the data for the category chart to bind to\n        const chartData = new Array<any>();\n        for (const month of months) {\n            const r = {};\n            r[monthKey] = month;\n            for (const item of data) {\n                r[item[expanseKey]] = item[month];\n            }\n            chartData.push(r);\n        }\n        this.chartData = chartData;\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public exportData() {\n        const headers = Object.keys(this.excelData[0]);\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const ws = wb.worksheets().add(\"Sheet1\");\n        ws.defaultColumnWidth = 200 * 20;\n\n        // reserving the [0] row where we will place the chart shape\n        // the [1] will be the headers. so data will start on [2]\n        const firstDataRow = 2;\n        const headerRow = ws.rows(firstDataRow - 1);\n        for (let c = 0; c < headers.length; c++) {\n            headerRow.setCellValue(c, headers[c]);\n        }\n\n        for (let r = 0; r < this.excelData.length; r++) {\n            const xlRow = ws.rows(r + firstDataRow);\n            const dataRow = this.excelData[r];\n            for (let c = 0; c < headers.length; c++) {\n                xlRow.setCellValue(c, dataRow[headers[c]]);\n            }\n        }\n        const indexRow = firstDataRow - 1;\n        const indexData = firstDataRow + this.excelData.length - 1;\n        const indexHeader = headers.length - 1;\n\n        const tableRegion = new WorksheetRegion(ws, indexRow, 0, indexData, indexHeader);\n        const table = ws.tables().add(tableRegion.toString(), true);\n\n        // set some extra height for the row where the chart will be\n        ws.rows(0).height = 5000;\n        const chart = ws.shapes().addChart(ChartType.ColumnClustered,\n          ws.rows(0).cells(0), { x: 0, y: 0 },\n          ws.rows(0).cells(headers.length - 1), { x: 100, y: 100 });\n        chart.setSourceData(table.wholeTableRegion.toString(), true);\n\n        ExcelUtility.save(wb, \"chartSample\");\n    }\n\n    public ngOnInit() {\n    }\n\n    public ngAfterViewInit(): void {\n    }\n\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.html","content":"<div class=\"container\">\n    <div class=\"options\">\n        <button (click)=\"exportData()\">Export To Excel File</button>\n    </div>\n    <div class=\"chart\">\n        <igx-category-chart #chart\n            height=\"60%\" width=\"100%\"\n            yAxisMinimumValue=0\n            xAxisInterval=1\n            chartType=\"column\"\n            brushes=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n            outlines=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n            thickness=0\n            [dataSource]=\"chartData\">\n        </igx-category-chart>\n\n        <igx-grid [data]=\"excelData\" height=\"40%\" width=\"100%\" [autoGenerate]=\"false\">\n            <igx-column [field]=\"'Expense'\" [resizable]=\"true\" width=\"10%\"></igx-column>\n            <igx-column [field]=\"'Jan'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Feb'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Mar'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Apr'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'May'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Jun'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Jul'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Aug'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Sep'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Oct'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Nov'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n            <igx-column [field]=\"'Dec'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\n        </igx-grid>\n    </div>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.css","content":".container {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n  min-width: 300px; }\n\n.chart {\n  flex: 1;\n  overflow: hidden; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxButtonModule } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithChartsComponent } from \"./excel-library/working-with/charts.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryWorkingWithChartsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-charts></app-charts>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}