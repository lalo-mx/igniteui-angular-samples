{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/tree-grid/tree-grid-finjs/tree-grid-finjs-sample.component.ts","content":"\nimport { AfterViewInit, Component, NgZone, ViewChild } from \"@angular/core\";\nimport { AbsoluteScrollStrategy, ConnectedPositioningStrategy, HorizontalAlignment, IgxButtonGroupComponent,\n    IgxSliderComponent, IgxTreeGridComponent, OverlaySettings, PositionSettings,\n    VerticalAlignment} from \"igniteui-angular\";\nimport { Observable } from \"rxjs\";\nimport { TreeLocalDataService } from \"./treeLocalData.service\";\n\ninterface IButton {\n    ripple ?: string;\n    label ?: string;\n    disabled ?: boolean;\n    togglable ?: boolean;\n    selected ?: boolean;\n    color ?: string;\n    icon ?: string;\n}\n\nexport class Button {\n    private ripple: string;\n    private label: string;\n    private disabled: boolean;\n    private togglable: boolean;\n    private selected: boolean;\n    private color: string;\n    private icon: string;\n\n    constructor(obj ?: IButton) {\n        this.label = obj.label;\n        this.selected = obj.selected || false;\n        this.togglable = obj.togglable;\n        this.disabled = obj.disabled || false;\n        this.color = obj.color;\n        this.icon = obj.icon;\n    }\n}\n\n@Component({\n    providers: [TreeLocalDataService],\n    selector: \"app-tree-grid-finjs-sample\",\n    styleUrls: [\"./tree-grid-finjs-sample.component.css\"],\n    templateUrl: \"./tree-grid-finjs-sample.component.html\"\n})\n\nexport class TreeGridFinJSComponent implements AfterViewInit  {\n    @ViewChild(\"grid1\") public grid1: IgxTreeGridComponent;\n    @ViewChild(\"buttonGroup1\") public buttonGroup1: IgxButtonGroupComponent;\n\n    @ViewChild(\"slider1\") public volumeSlider: IgxSliderComponent;\n    @ViewChild(\"slider2\") public intervalSlider: IgxSliderComponent;\n\n    public theme = false;\n    public volume = 1000;\n    public frequency = 500;\n    public data: Observable < any[] > ;\n    public recordsUpdatedLastSecond: number[] ;\n    public controls = [\n        new Button({\n            disabled: false,\n            icon: \"update\",\n            label: \"LIVE PRICES\",\n            selected: false\n        }),\n        new Button({\n            disabled: false,\n            icon: \"update\",\n            label: \"LIVE ALL PRICES\",\n            selected: false\n        }),\n        new Button({\n            disabled: true,\n            icon: \"stop\",\n            label: \"Stop\",\n            selected: false\n        })\n    ];\n\n    public items: any[] = [{field: \"Export native\"}, { field: \"Export JS Excel\"}];\n\n    public _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    public _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    private subscription;\n    private selectedButton;\n    private _timer;\n\n    // tslint:disable-next-line:member-ordering\n    constructor(private zone: NgZone, private localService: TreeLocalDataService) {\n        this.subscription = this.localService.getData(this.volume);\n        this.data = this.localService.records;\n    }\n    // tslint:disable-next-line:member-ordering\n    public ngOnInit() {\n        if (this.theme) {\n            document.body.classList.add(\"dark-theme\");\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.grid1.reflow();\n    }\n    public onButtonAction(event: any) {\n        switch (event.index) {\n            case 0:\n                {\n                    this.disableOtherButtons(event.index, true);\n                    const currData = this.grid1.data;\n                    this._timer = setInterval(() => this.ticker(currData), this.frequency);\n                    break;\n                }\n            case 1:\n                {\n                    this.disableOtherButtons(event.index, true);\n                    const currData = this.grid1.data;\n                    this._timer = setInterval(() => this.tickerAllPrices(currData), this.frequency);\n                    break;\n                }\n                case 2:\n                {\n                    this.disableOtherButtons(event.index, false);\n                    this.stopFeed();\n                    break;\n                }\n            default:\n                {\n                    break;\n                }\n        }\n    }\n\n    public stopFeed() {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    public formatNumber(value: number) {\n        return value.toFixed(2);\n    }\n\n    public percentage(value: number) {\n        return value.toFixed(2) + \"%\";\n    }\n\n    public formatCurrency(value: number) {\n        return \"$\" + value.toFixed(3);\n    }\n\n    public onVolumeChanged(event: any) {\n        this.localService.getData(this.volume);\n    }\n\n    public onThemeChanged(event: any) {\n        if (event.checked) {\n            document.body.querySelector(\"div.main\").classList.add(\"dark-theme\");\n        } else {\n            document.body.querySelector(\"div.main\").classList.remove(\"dark-theme\");\n        }\n    }\n\n    public toggleToolbar(event: any) {\n        this.grid1.showToolbar = !this.grid1.showToolbar;\n    }\n\n    private negative = (rowData: any): boolean => {\n        return rowData[\"Change(%)\"] < 0;\n    }\n    private positive = (rowData: any): boolean => {\n        return rowData[\"Change(%)\"] > 0;\n    }\n    private changeNegative = (rowData: any): boolean => {\n        return rowData[\"Change(%)\"] < 0 && rowData[\"Change(%)\"] > -1;\n    }\n    private changePositive = (rowData: any): boolean => {\n        return rowData[\"Change(%)\"] > 0 && rowData[\"Change(%)\"] < 1;\n    }\n    private strongPositive = (rowData: any): boolean => {\n        return rowData[\"Change(%)\"] >= 1;\n    }\n    private strongNegative = (rowData: any, key: string): boolean => {\n        return rowData[\"Change(%)\"] <= -1;\n    }\n\n    // tslint:disable-next-line:member-ordering\n    public trends = {\n        changeNeg: this.changeNegative,\n        changePos: this.changePositive,\n        negative: this.negative,\n        positive: this.positive,\n        strongNegative: this.strongNegative,\n        strongPositive: this.strongPositive\n    };\n    // tslint:disable-next-line:member-ordering\n    public trendsChange = {\n        changeNeg2: this.changeNegative,\n        changePos2: this.changePositive,\n        strongNegative2: this.strongNegative,\n        strongPositive2: this.strongPositive\n    };\n    // tslint:disable-next-line:member-ordering\n    public buttonCols = {\n        buttonCols: true\n    };\n\n    private disableOtherButtons(ind: number, disableButtons: boolean) {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.volumeSlider.disabled = disableButtons;\n        this.intervalSlider.disabled = disableButtons;\n        this.selectedButton = ind;\n        this.buttonGroup1.buttons.forEach((button, index) => {\n            if (index === 2) { button.disabled = !disableButtons; } else {\n                button.disabled = disableButtons;\n            }\n        });\n    }\n\n    get buttonSelected(): number {\n      return this.selectedButton || this.selectedButton === 0 ? this.selectedButton : -1;\n    }\n\n    // tslint:disable-next-line:member-ordering\n    public ticker(data: any) {\n        this.zone.runOutsideAngular(() => {\n            this.grid1.data = this.updateRandomPrices(data);\n            this.zone.run(() => this.grid1.markForCheck());\n        });\n    }\n\n    // tslint:disable-next-line:member-ordering\n    public tickerAllPrices(data: any) {\n        this.zone.runOutsideAngular(() => {\n            this.grid1.data = this.updateAllPrices(data);\n            this.zone.run(() => this.grid1.markForCheck());\n        });\n    }\n\n    // tslint:disable-next-line:member-ordering\n    public updateAllPrices(data: any[]): any {\n        for (const dataRow of data) {\n          this.randomizeObjectData(dataRow, true);\n        }\n        return data;\n      }\n\n    // tslint:disable-next-line:member-ordering\n    public updateRandomPrices(data: any[]): any {\n        for (const dataRow of data) {\n            this.randomizeObjectData(dataRow, false);\n            this.randomizeChildObjData(dataRow);\n        }\n        return data;\n      }\n\n    private randomizeObjectData(dataObj, random: boolean) {\n        const changeP = \"Change(%)\";\n        const res = this.generateNewPrice(dataObj.Price);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n\n        if (random && dataObj.Categories) {\n            // tslint:disable-next-line:prefer-for-of\n            for (let y = 0; y < dataObj.Categories.length; y++) {\n                this.randomizeObjectData(dataObj.Categories[y], true);\n            }\n        }\n    }\n\n    private randomizeChildObjData(dataObj) {\n        for (let i = Math.round(Math.random() * 10); i < dataObj.Categories.length;\n            i += Math.round(Math.random() * 10)) {\n            this.randomizeObjectData(dataObj.Categories[i], true);\n        }\n    }\n    private generateNewPrice(oldPrice): any {\n        const rnd = parseFloat(Math.random().toFixed(2));\n        const volatility = 2;\n        let newPrice = 0;\n\n        let changePercent = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n\n        const changeAmount = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n\n        const result = {Price: 0, ChangePercent: 0};\n        result.Price = parseFloat(newPrice.toFixed(2));\n        result.ChangePercent = parseFloat(changePercent.toFixed(2));\n\n        return result;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/tree-grid/tree-grid-finjs/tree-grid-finjs-sample.component.html","content":"<div class=\"grid__wrapper\" [class.dark-theme]=\"theme\">\n    <div class=\"controls-holder\">\n        <div class=\"switches\">\n            <div class=\"control-item\">\n                <igx-switch [checked]=\"true\" [(ngModel)]=\"theme\" (change)=\"onThemeChanged($event)\">Dark</igx-switch>\n            </div>\n            <div class=\"control-item\">\n                <igx-switch [checked]=\"grid1.showToolbar\" (change)=\"toggleToolbar($event)\" color=\"blue\" cssClass=\"finjs-sample-switch\">Toolbar</igx-switch>\n            </div>\n            <div class=\"finjs-slider control-item\">\n                <label for=\"slider\">Records: {{volume}}</label>\n                <igx-slider #slider1 id=\"slider\" [minValue]=\"0\" [maxValue]=\"10000\" [(ngModel)]=\"volume\" [step]=\"100\"\n                    (onValueChange)=\"onVolumeChanged($event)\" thumbLabelVisibilityDuration=\"250\"></igx-slider>\n            </div>\n            <div class=\"finjs-slider control-item\">\n                <label for=\"slider\">Frequency: {{frequency}} ms</label>\n                <igx-slider #slider2 id=\"slider\" [minValue]=\"100\" [maxValue]=\"3000\" [step]=\"10\" [(ngModel)]=\"frequency\"\n                    thumbLabelVisibilityDuration=\"250\" [isContinuous]=\"true\"></igx-slider>\n            </div>\n        </div>\n        <div class=\"control-item finjs-play-controls\">\n            <igx-buttongroup class=\"finjssample-btn-group\" #buttonGroup1 [multiSelection]=\"false\" [values]=\"controls\"\n                (onSelect)=\"onButtonAction($event)\"></igx-buttongroup>\n        </div>\n    </div>\n    <div class=\"sample-toolbar\">\n        <span *ngIf=\"buttonSelected === 1\">Feeding {{volume}} records every {{frequency / 1000}} sec.\n            {{volume}} records updated. </span>\n        <span *ngIf=\"buttonSelected === 0\">Feeding {{volume}} records every {{frequency / 1000}} sec.\n            ~{{volume/5}} records updated.</span>\n    </div>\n    <igx-tree-grid #grid1 [data]=\"data | async\" height=\"850px\" width=\"100%\" [autoGenerate]='false'\n        displayDensity='compact' childDataKey=\"Categories\"\n        columnHidingTitle=\"Indicators\" hiddenColumnsText=\"Hidden\" primaryKey='ID'\n        [rowSelectable]=\"true\" [allowFiltering]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"\n        [columnPinning]=\"true\" [exportExcel]=\"true\" exportExcelText=\"Export to Excel\">\n        <igx-column [field]=\"'ID'\" [hidden]='true'></igx-column>\n        <igx-column [field]=\"'Category'\" [width]=\"'180px'\" [groupable]='true' [sortable]='true' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Type'\" [width]=\"'140px'\" [groupable]='true' [sortable]='true' [filterable]='true' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Open Price'\" [width]=\"'120px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\"\n            [movable]=\"true\" [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Price'\" [width]=\"'110px'\" [dataType]=\"'number'\" [cellClasses]=\"trends\" [movable]=\"true\"\n            [sortable]=\"true\">\n            <ng-template igxCell let-cell=\"cell\">\n                <div class=\"finjs-icons\">\n                    <span>{{cell.value | currency:'USD':'symbol':'1.4-4'}}</span>\n                    <igx-icon *ngIf=\"trends.positive(cell.row.rowData)\" iconName=\"trending_up\">trending_up</igx-icon>\n                    <igx-icon *ngIf=\"trends.negative(cell.row.rowData)\" iconName=\"trending_down\">trending_down</igx-icon>\n                </div>\n            </ng-template>\n        </igx-column>\n\n        <igx-column [field]=\"'Change'\" [width]=\"'120px'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\"\n            [sortable]=\"true\" [cellClasses]=\"trendsChange\" [formatter]=\"formatNumber\" [movable]=\"true\">\n        </igx-column>\n\n        <igx-column [field]=\"'Change(%)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"percentage\" [movable]=\"true\"\n            [sortable]=\"true\" [cellClasses]=\"trendsChange\">\n        </igx-column>\n\n        <igx-column [field]=\"'Buy'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Sell'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Spread'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\" [movable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Volume'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatNumber\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'High(D)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Low(D)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'High(Y)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Low(Y)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Start(Y)'\" [width]=\"'110px'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [movable]=\"true\"\n            [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'Chart'\" [width]=\"'60px'\" [hidden]=\"false\" [filterable]='false'>\n            <ng-template igxCell let-cell=\"cell\" class=\"center-text\">\n                <button class=\"button-icon\" igxButton=\"icon\" igxRippleCentered=\"true\">\n                    <igx-icon (click)=\"chartClick(cell)\" fontSet=\"material\">insert_chart_outlined</igx-icon>\n                </button>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'Grid'\" [width]=\"'80px'\" [hidden]=\"false\" [filterable]='false'>\n            <ng-template igxCell let-cell=\"cell\" class=\"center-text\">\n                <button class=\"button-icon\" igxButton=\"icon\" igxRippleCentered=\"true\">\n                    <igx-icon (click)=\"chartClick(cell)\" iconName=\"table_chart\" fontSet=\"material\">table_chart</igx-icon>\n                </button>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'IndGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndSect'\" [width]=\"'120px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'IndSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'SecType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IssuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'DBRS'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CollatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Curncy'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Security'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'sector'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CUSIP'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Ticker'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Cpn'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Maturity'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_3YR'\" [width]=\"'110px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'ZV_SPREAD'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_5YR'\" [width]=\"'50px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_1YR'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndSect'\" [width]=\"'100px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'IndSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'SecType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IssuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'DBRS'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CollatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Curncy'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Security'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'sector'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CUSIP'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Ticker'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Cpn'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Maturity'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_3YR'\" [width]=\"'110px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'ZV_SPREAD'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_5YR'\" [width]=\"'50px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_1YR'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndSect'\" [width]=\"'100px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'IndSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'SecType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IssuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'DBRS'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CollatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Curncy'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Security'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'sector'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CUSIP'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Ticker'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Cpn'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Maturity'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_3YR'\" [width]=\"'110px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'ZV_SPREAD'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_5YR'\" [width]=\"'50px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'KRD_1YR'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndGrou'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IndSect'\" [width]=\"'100px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'IndSubg'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'SecType'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'IssuerN'\" [width]=\"'170px'\" [filterable]='false' [resizable]='true'></igx-column>\n        <igx-column [field]=\"'Moodys'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Fitch'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'DBRS'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CollatT'\" [width]=\"'90px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Curncy'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Security'\" [width]=\"'120px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'sector'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'CUSIP'\" [width]=\"'100px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Ticker'\" [width]=\"'60px'\" [filterable]='false'></igx-column>\n        <igx-column [field]=\"'Cpn'\" [width]=\"'80px'\" [filterable]='false'></igx-column>\n    </igx-tree-grid>\n  </div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/tree-grid/tree-grid-finjs/tree-grid-finjs-sample.component.css","content":":host ::ng-deep .finjs-icons {\n  display: flex;\n  align-items: center; }\n  :host ::ng-deep .finjs-icons igx-icon {\n    font-size: 16px;\n    width: 16px;\n    height: 16px;\n    margin-left: 4px; }\n\n:host ::ng-deep .changePos,\n:host ::ng-deep .changeNeg,\n:host ::ng-deep .strongPositive,\n:host ::ng-deep .strongNegative {\n  color: #fff !important; }\n  :host ::ng-deep .changePos .igx-grid__td-text,\n  :host ::ng-deep .changeNeg .igx-grid__td-text,\n  :host ::ng-deep .strongPositive .igx-grid__td-text,\n  :host ::ng-deep .strongNegative .igx-grid__td-text {\n    padding: 2px 5px; }\n\n:host ::ng-deep .positive {\n  color: #4eb862 !important; }\n\n:host ::ng-deep .positive.strongPositive .igx-grid__td-text {\n  color: rgba(78, 184, 98, 0.8) !important; }\n\n:host ::ng-deep .negative {\n  color: #d31642 !important; }\n\n:host ::ng-deep .negative.strongNegative .igx-grid__td-text {\n  color: rgba(255, 19, 74, 0.8) !important; }\n\n:host ::ng-deep .changePos .igx-grid__td-text {\n  background: #335e3b; }\n\n:host ::ng-deep .changePos1 {\n  background: #335e3b;\n  color: #fff; }\n\n:host ::ng-deep .changePos2 .igx-grid__td-text {\n  border-right: 4px solid #335e3b;\n  padding-right: 4px; }\n\n:host ::ng-deep .changeNeg .igx-grid__td-text {\n  background: #7a1c32; }\n\n:host ::ng-deep .changeNeg1 {\n  color: #fff;\n  background: #7a1c32; }\n\n:host ::ng-deep .changeNeg2 .igx-grid__td-text {\n  border-right: 4px solid #7a1c32;\n  padding-right: 4px; }\n\n:host ::ng-deep .igx-grid__td--selected.changePos1,\n:host ::ng-deep .igx-grid__td--selected.changePos2,\n:host ::ng-deep .igx-grid__td--selected.changePos {\n  background-color: #335e3b !important; }\n  :host ::ng-deep .igx-grid__td--selected.changePos1 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changePos1 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.changePos2 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changePos2 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.changePos .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changePos .igx-grid__td-text {\n    color: #fff; }\n\n:host ::ng-deep .igx-grid__td--selected.changeNeg1,\n:host ::ng-deep .igx-grid__td--selected.changeNeg2,\n:host ::ng-deep .igx-grid__td--selected.changeNeg {\n  background-color: #7a1c32 !important; }\n  :host ::ng-deep .igx-grid__td--selected.changeNeg1 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changeNeg1 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.changeNeg2 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changeNeg2 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.changeNeg .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.changeNeg .igx-grid__td-text {\n    color: #fff; }\n\n:host ::ng-deep .strongPositive .igx-grid__td-text {\n  background: #459a55; }\n\n:host ::ng-deep .strongPositive1 {\n  background: #459a55;\n  color: #fff; }\n\n:host ::ng-deep .strongPositive2 .igx-grid__td-text {\n  border-right: 4px solid #459a55;\n  padding-right: 4px; }\n\n:host ::ng-deep .strongNegative .igx-grid__td-text {\n  background: #d31642;\n  color: #fff; }\n\n:host ::ng-deep .strongNegative1 {\n  background: #d31642;\n  color: #fff; }\n\n:host ::ng-deep .strongNegative2 .igx-grid__td-text {\n  border-right: 4px solid #d31642;\n  padding-right: 4px; }\n\n:host ::ng-deep .igx-grid__td--selected.strongPositive1,\n:host ::ng-deep .igx-grid__td--selected.strongPositive2,\n:host ::ng-deep .igx-grid__td--selected.strongPositive {\n  background-color: #459a55 !important; }\n  :host ::ng-deep .igx-grid__td--selected.strongPositive1 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongPositive1 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.strongPositive2 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongPositive2 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.strongPositive .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongPositive .igx-grid__td-text {\n    color: #fff; }\n\n:host ::ng-deep .igx-grid__td--selected.strongNegative1,\n:host ::ng-deep .igx-grid__td--selected.strongNegative2,\n:host ::ng-deep .igx-grid__td--selected.strongNegative {\n  background-color: #d31642 !important; }\n  :host ::ng-deep .igx-grid__td--selected.strongNegative1 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongNegative1 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.strongNegative2 .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongNegative2 .igx-grid__td-text,\n  :host ::ng-deep .igx-grid__td--selected.strongNegative .finjs-icons,\n  :host ::ng-deep .igx-grid__td--selected.strongNegative .igx-grid__td-text {\n    color: #fff; }\n\n:host ::ng-deep .controls-holder {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap; }\n\n:host ::ng-deep .switches {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex: 1 0 0%;\n  min-width: 500px;\n  padding-right: 20px;\n  font-size: 0.9rem; }\n\n:host ::ng-deep .control-item {\n  padding-right: 20px; }\n\n:host ::ng-deep .igx-slider, :host ::ng-deep .igx-slider--disabled {\n  height: 24px; }\n\n:host ::ng-deep .finjs-slider {\n  width: 40%; }\n\n:host ::ng-deep .finjs-play-controls {\n  width: 45%;\n  min-width: 500px; }\n\n:host ::ng-deep .sample-toolbar {\n  height: 20px;\n  font-size: 0.8rem; }\n\n:host ::ng-deep .dark-theme .finjs-slider, :host ::ng-deep .dark-theme .sample-toolbar {\n  color: rgba(255, 255, 255, 0.87); }\n\n.grid__wrapper {\n  padding: 5px 15px;\n  height: 100%; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/tree-grid/tree-grid-finjs/treeLocalData.service.ts","content":"import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, interval, Observable} from \"rxjs\";\nimport { FinancialData } from \"./hierFinancialData\";\n\n@Injectable()\nexport class TreeLocalDataService {\n    public records: Observable<any[]>;\n    public _records: BehaviorSubject<any[]>;\n\n    constructor() {\n        this._records = new BehaviorSubject([]);\n        this.records = this._records.asObservable();\n    }\n\n    public getData(count: number = 10) {\n        const financialData: FinancialData = new FinancialData();\n        this._records.next(financialData.generateData(count));\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/tree-grid/tree-grid-finjs/hierFinancialData.ts","content":"/* tslint:disable */\nimport { MOCKFINANCEDATA, DATA } from \"../../grid/services/financialData\";\n\n\nconst Contract: any[] = [\n    \"Forwards\", \"Futures\", \"Options\", \"Swap\", \"CFD\", \"Ticks\", \"Swaptions\", \"Asion Option\"\n]\n  \nexport class FinancialData {\n    public generateData(count: number): any[] {\n        const currData = [];\n        for (let i = 0; i < DATA.length; i++) {\n            DATA[i].ID = 10 + i;\n          }\n\n        for (let i = 0; i < Contract.length; i++) {\n          let rand = Math.floor(Math.random() * Math.floor(DATA.length));\n          const dataObj = Object.assign({}, DATA[rand]);\n          dataObj.Category = Contract[i];\n          dataObj['Categories'] = [];\n          dataObj.ID = i * count;\n\n          // add second level of hier data\n          const childData = this.addHierarchicalData(count/4, i, dataObj.ID);\n          for (const childDataObj of childData) {\n            const numberofChildData = this.generateRandomNumber(3,6);\n            childDataObj['Categories'] = this.addHierarchicalData(childData/4, i, childDataObj.ID, 4);\n          }\n\n          // add level of hier data\n          dataObj['Categories'] = childData;\n\n          this.addMockData(dataObj);\n          currData.push(dataObj);\n        }\n\n        return currData;\n    }\n\n    private randomizeObjectData(childDataObj) {\n        const changeP = \"Change(%)\";\n        const res = this.generateNewPrice(childDataObj.Price);\n        childDataObj.Change = res.Price - childDataObj.Price;\n        childDataObj.Price = res.Price;\n        childDataObj[changeP] = res.ChangePercent;\n    }\n    private generateNewPrice(oldPrice): any {\n        const rnd = parseFloat(Math.random().toFixed(2));\n        const volatility = 2;\n        let newPrice = 0;\n\n        let changePercent = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n\n        const changeAmount = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n\n        const result = {Price: 0, ChangePercent: 0};\n        result.Price = parseFloat(newPrice.toFixed(2));\n        result.ChangePercent = parseFloat(changePercent.toFixed(2));\n\n        return result;\n    }\n    private generateRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    public updateAllPrices(data: any[]): any[] {\n      const currData = [];\n      for (const dataRow of data) {\n        const dataObj = Object.assign({}, dataRow);\n        this.randomizeObjectData(dataObj);\n        currData.push(dataObj);\n      }\n      return currData;\n    }\n\n  public updateRandomPrices(data: any[]): any {\n      const currData = data.slice(0, data.length + 1);\n      let y = 0;\n      for (let i = Math.round(Math.random() * 10); i < data.length; i += Math.round(Math.random() * 10)) {\n        const dataObj = Object.assign({}, data[i]);\n        this.randomizeObjectData(dataObj);\n        currData[i] = dataObj;\n        y++;\n      }\n     // return {data: currData, recordsUpdated: y };\n      return currData;\n    }\n    private addMockData(dataObj) {\n        for (const mockData of MOCKFINANCEDATA) {\n          for (const prop in mockData) {\n              if (mockData.hasOwnProperty(prop)) {\n                  dataObj[prop] = mockData[prop];\n              }\n          }\n        }\n      }\n      private addHierarchicalData(count: number, i: number, parentRowId: number, toAdd?: number): any {\n        const childData = [];\n        const numberToAdd = toAdd ? toAdd : Math.round(count / Contract.length);\n        for (let y = 0; y < numberToAdd; y++) {\n          const rand = Math.floor(Math.random() * Math.floor(DATA.length));\n          const childDataObj = Object.assign({}, DATA[rand]);\n          childDataObj.ID = parentRowId * 10  + y + 1;\n          this.randomizeObjectData(childDataObj);\n          this.addMockData(childDataObj)\n          childData.push(childDataObj);\n        }\n        return childData;\n      }\n  }\n  "},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxButtonGroupModule,\r\n\tIgxIconModule,\r\n\tIgxSliderModule,\r\n\tIgxToggleModule,\r\n\tIgxButtonModule,\r\n\tIgxExcelExporterService,\r\n\tIgxSwitchModule,\r\n\tIgxRippleModule\r\n } from \"igniteui-angular\";\r\nimport { TreeGridFinJSComponent } from \"./tree-grid/tree-grid-finjs/tree-grid-finjs-sample.component\";\r\nimport { TreeLocalDataService } from \"./tree-grid/tree-grid-finjs/treeLocalData.service\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tTreeGridFinJSComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxButtonGroupModule,\r\n\t\tIgxIconModule,\r\n\t\tIgxSliderModule,\r\n\t\tIgxToggleModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxSwitchModule,\r\n\t\tIgxRippleModule,\r\n\t\tIgxGridModule.forRoot()\n  ],\n  providers: [\r\n\t\tTreeLocalDataService,\r\n\t\tIgxExcelExporterService\r\n\t],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-tree-grid-finjs-sample></app-tree-grid-finjs-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}