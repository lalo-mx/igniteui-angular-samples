{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-frequency/category-chart-high-frequency-sample.component.ts","content":"import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    ViewChild\n} from \"@angular/core\";\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts/ES5/igx-category-chart-component\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-category-chart-high-frequency-sample\",\n    styleUrls: [\"./category-chart-high-frequency-sample.component.scss\"],\n    templateUrl: \"./category-chart-high-frequency-sample.component.html\"\n})\nexport class CategoryChartHighFrequencyComponent implements AfterViewInit, OnDestroy {\n    @Input()\n    public scalingRatio: number = 1;\n\n    public data: any[];\n\n    @ViewChild(\"chart\")\n    public chart: IgxCategoryChartComponent;\n\n    @ViewChild(\"fpsSpan\")\n    public fpsSpan: ElementRef;\n\n    private currValue: number = 15;\n    private currIndex: number = 0;\n\n    private _maxPoints: number = 5000;\n\n    private _refreshMilliseconds: number = 10;\n    private _interval: number = -1;\n    private _frames: number = 0;\n    private _time: Date;\n\n    constructor(private _zone: NgZone) {\n        this.data = this.generateData();\n    }\n\n    public onOptimizeScalingChanged(checked: boolean) {\n        if (checked) {\n            this.scalingRatio = 1.0;\n        } else {\n            this.scalingRatio = NaN;\n        }\n    }\n\n    public onChangeAmountClicked() {\n        this.data = this.generateData();\n    }\n\n    public onRefreshFrequencyChanged(val: string) {\n        let num: number = parseInt(val, 10);\n\n        if (isNaN(num)) {\n            num = 10;\n        }\n        if (num < 10) {\n            num = 10;\n        }\n        if (num > 500) {\n            num = 500;\n        }\n        this._refreshMilliseconds = num;\n        this.setupInterval();\n    }\n\n    public onMaxPointsChanged(val: string) {\n        let num: number = parseInt(val, 10);\n\n        if (isNaN(num)) {\n            num = 5000;\n        }\n        if (num < 5000) {\n            num = 5000;\n        }\n        if (num > 2000000) {\n            num = 2000000;\n        }\n        this.maxPoints = num;\n    }\n\n    public get maxPointsText(): string {\n        return this.toShortString(this._maxPoints);\n    }\n\n    public get maxPoints(): number {\n        return this._maxPoints;\n    }\n    @Input()\n    public set maxPoints(v: number) {\n        this._maxPoints = v;\n    }\n\n    public get refreshMilliseconds(): number {\n        return this._refreshMilliseconds;\n    }\n    @Input()\n    public set refreshMilliseconds(v: number) {\n        this._refreshMilliseconds = v;\n        this.setupInterval();\n    }\n\n    public ngOnDestroy(): void {\n    if (this._interval >= 0) {\n        this._zone.runOutsideAngular(() => {\n        window.clearInterval(this._interval);\n        });\n        this._interval = -1;\n    }\n    }\n\n    public ngAfterViewInit(): void {\n        this._time = new Date();\n        this.setupInterval();\n    }\n\n    private setupInterval(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n            window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n\n        this._zone.runOutsideAngular(() => {\n            this._interval = window.setInterval(() => this.tick(),\n            this.refreshMilliseconds);\n        });\n    }\n\n    private generateData(): any[] {\n        const data: any[] = [];\n        for (this.currIndex = 0; this.currIndex < this.maxPoints; this.currIndex++) {\n            this.currValue += Math.random() * 4.0 - 2.0;\n            data.push({ Label: this.currIndex.toString(), Value: this.currValue });\n        }\n        return data;\n    }\n\n    private tick(): void {\n        this.currValue += Math.random() * 4.0 - 2.0;\n        this.currIndex++;\n        const newVal = { Label: this.currIndex.toString(), Value: this.currValue };\n\n        const oldVal = this.data[0];\n        this.data.push(newVal);\n        this.chart.notifyInsertItem(this.data, this.data.length - 1, newVal);\n        this.data.shift();\n        this.chart.notifyRemoveItem(this.data, 0, oldVal);\n\n        this._frames++;\n        const currTime = new Date();\n        const elapsed = (currTime.getTime() - this._time.getTime());\n        if (elapsed > 5000) {\n            const fps = this._frames / (elapsed / 1000.0);\n            this._time = currTime;\n            this._frames = 0;\n\n            this.fpsSpan.nativeElement.textContent = \"FPS: \" + Math.round(fps).toString();\n        }\n    }\n\n    private toShortString(largeValue: number): string {\n        let roundValue: number;\n\n        if (largeValue >= 1000000) {\n            roundValue = Math.round(largeValue / 100000) / 10;\n            return roundValue + \"m\";\n        }\n        if (largeValue >= 1000) {\n            roundValue = Math.round(largeValue / 100) / 10;\n            return roundValue + \"k\";\n        }\n\n        roundValue = Math.round(largeValue);\n        return roundValue + \"\";\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-frequency/category-chart-high-frequency-sample.component.html","content":"<div class=\"sample-container\">\n        <igx-category-chart\n            [dataSource]=\"data\"\n            [pixelScalingRatio]=\"scalingRatio\"\n            yAxisLabelExtent=\"40\"\n            #chart>\n        </igx-category-chart>\n\n        <div class=\"sample-controls\">\n            <button igxButton=\"raised\"\n            igxRipple=\"white\"\n            (click)=\"onChangeAmountClicked()\"\n            >Change Amount</button>\n            <span #fpsSpan class=\"fpslabel\">FPS:</span>\n            <div class=\"max-points-slider\">\n            <span class=\"label\">Data amount: {{ maxPointsText }}</span>\n            <br/>\n            <igx-slider id=\"slider\"\n            minValue=\"5000\"\n            maxValue=\"2000000\"\n            [value]=\"maxPoints\"\n            [isContinuous]=true\n            (onValueChange)=\"onMaxPointsChanged($event.value)\"></igx-slider>            \n        </div>\n\n        <div class=\"frequency-slider\">\n            <span class=\"label\">Refresh frequency (ms): {{ refreshMilliseconds }} </span>\n            <igx-slider id=\"slider\"\n            minValue=\"10\"\n            maxValue=\"500\"\n            [value]=\"refreshMilliseconds\"\n            [isContinuous]=true\n            (onValueChange)=\"onRefreshFrequencyChanged($event.value)\"></igx-slider>             \n        </div>\n        <div class=\"optimizeCheckbox\">\n            <span class=\"label\">Optimize Scaling: </span>\n            <input class=\"checkbox\" type=\"checkbox\" (change)=\"onOptimizeScalingChanged($event.target.checked)\"/>\n        </div> \n    </div>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-frequency/category-chart-high-frequency-sample.component.scss","content":".max-points-slider, .frequency-slider {\n    width: 195px;\n    vertical-align: middle;\n    display: inline-block;\n    margin-right: 12px;\n  }\n\n.optimizeCheckbox{\n    width: 130px;\n    vertical-align: top;\n    display:inline-block;\n    margin-right: 12px;\n}\n\n.sample-container {\n    width: 100%;\n    height: 550px;\n}\n.sample-controls {\n    margin-left: 10px;\n    height: 50px;\n    font: \"16px 'Titillium Web', sans-serif\"\n}\nigx-category-chart {\n    max-width: 900px;\n    width: 100%;\n    height: calc(100% - 50px);\n}\n.label {\n    width: 100%;\n    display: inline-block;\n    text-align: center;\n}\n\n.checkbox{\n    width: 100%;\n    display: inline-block;\n    margin: 25 auto;    \n}\n\n.fpslabel {\n    display: inline-block;\n    width: 65px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { CategoryChartHighFrequencyComponent } from \"./category-chart/high-frequency/category-chart-high-frequency-sample.component\";\r\nimport { IgxSliderModule } from \"igniteui-angular\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tCategoryChartHighFrequencyComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxSliderModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-category-chart-high-frequency-sample></app-category-chart-high-frequency-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-charts\":\"6.2.2\",\"igniteui-angular-core\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}