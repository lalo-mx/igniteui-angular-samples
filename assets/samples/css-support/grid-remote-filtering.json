{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-filtering-sample/remote-filtering-sample.component.ts","content":"import { ChangeDetectorRef, Component, OnInit, ViewChild } from \"@angular/core\";\nimport { IgxGridComponent, IgxToastComponent } from \"igniteui-angular\";\nimport { RemoteFilteringService } from \"../services/remoteFilteringService\";\n\n@Component({\n    providers: [RemoteFilteringService],\n    selector: \"app-grid-remote-filtering-sample\",\n    styleUrls: [\"./remote-filtering-sample.component.css\"],\n    templateUrl: \"./remote-filtering-sample.component.html\"\n})\nexport class RemoteFilteringSampleComponent implements OnInit {\n    public remoteData: any;\n    @ViewChild(\"grid\") public grid: IgxGridComponent;\n    @ViewChild(\"toast\") public toast: IgxToastComponent;\n    private _prevRequest: any;\n    private _chunkSize: number;\n\n    constructor(private _remoteService: RemoteFilteringService, public cdr: ChangeDetectorRef) { }\n\n    public ngOnInit(): void {\n        this.remoteData = this._remoteService.remoteData;\n    }\n\n    public ngAfterViewInit() {\n        const filteringExpr = this.grid.filteringExpressionsTree.filteringOperands;\n        const sortingExpr = this.grid.sortingExpressions[0];\n        this._chunkSize = Math.ceil(parseInt(this.grid.height, 10) / this.grid.rowHeight);\n        this._remoteService.getData(\n            {\n                chunkSize: this._chunkSize,\n                startIndex: this.grid.virtualizationState.startIndex\n            },\n            filteringExpr,\n            sortingExpr,\n            (data) => {\n                this.grid.totalItemCount = data[\"@odata.count\"];\n            });\n    }\n\n    public processData() {\n        if (this._prevRequest) {\n            this._prevRequest.unsubscribe();\n        }\n\n        this.toast.message = \"Loading Remote Data...\";\n        this.toast.position = 1;\n        this.toast.displayTime = 1000;\n        this.toast.show();\n        this.cdr.detectChanges();\n\n        const virtualizationState = this.grid.virtualizationState;\n        const filteringExpr = this.grid.filteringExpressionsTree.filteringOperands;\n        const sortingExpr = this.grid.sortingExpressions[0];\n\n        this._prevRequest = this._remoteService.getData(\n            {\n                chunkSize: this._chunkSize,\n                startIndex: virtualizationState.startIndex\n            },\n            filteringExpr,\n            sortingExpr,\n            (data) => {\n                this.grid.totalItemCount = data[\"@odata.count\"];\n                this.toast.hide();\n                this.cdr.detectChanges();\n            });\n    }\n\n    public formatNumber(value: number) {\n        return value.toFixed(2);\n    }\n\n    public formatCurrency(value: number) {\n        return \"$\" + value.toFixed(2);\n    }\n\n    public ngOnDestroy() {\n        if (this._prevRequest) {\n            this._prevRequest.unsubscribe();\n        }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-filtering-sample/remote-filtering-sample.component.html","content":"<div class=\"grid__wrapper\">\n    <igx-grid #grid [data]=\"remoteData | async\" [height]=\"'440px'\" [width]=\"'100%'\" [autoGenerate]='false'\n        (onDataPreLoad)=\"processData()\" (onSortingDone)=\"processData()\" (onFilteringDone)=\"processData()\"\n        [allowFiltering]=\"true\">\n        <igx-column [field]=\"'ProductID'\" [sortable]=\"true\" [filterable]=\"false\" width=\"18%\"></igx-column>\n        <igx-column [field]=\"'ProductName'\" [sortable]=\"true\" width=\"16%\"></igx-column>\n        <igx-column [field]=\"'UnitPrice'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [sortable]=\"true\" width=\"16%\"></igx-column>\n        <igx-column [field]=\"'UnitsInStock'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\" [sortable]=\"true\" width=\"16%\">\n            <ng-template igxHeader>\n                <span class=\"cellAlignSyle\">UnitsInStock</span>\n            </ng-template>\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>50\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<=50\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>50\" [class.down]=\"val<=50\">{{ formatNumber(val) }}</span>\n                </div>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'QuantityPerUnit'\" [sortable]=\"true\" width=\"18%\"></igx-column >\n        <igx-column [field]=\"'ReorderLevel'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\" [sortable]=\"true\" width=\"16%\">\n            <ng-template igxHeader>\n                <span class=\"cellAlignSyle\">ReorderLevel</span>\n            </ng-template>\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>20\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<=20\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>0\" [class.down]=\"val<=0\">{{ formatNumber(val) }}</span>\n                </div>\n            </ng-template>\n        </igx-column>\n    </igx-grid>\n\n    <igx-toast #toast></igx-toast>\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-filtering-sample/remote-filtering-sample.component.css","content":".grid__wrapper {\n  margin: 0 auto;\n  padding: 5px; }\n\n.cellAlignSyle {\n  text-align: right;\n  float: right; }\n\n.cellAlignSyle > span {\n  float: right; }\n\n.up {\n  color: green; }\n\n.down {\n  color: red; }\n\n.headerAlignSyle {\n  text-align: right !important; }\n\n.currency-badge-container {\n  width: 80px;\n  float: right; }\n\n.badge-left {\n  float: left; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/services/remoteFilteringService.ts","content":"import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { FilteringLogic, IForOfState, SortingDirection } from \"igniteui-angular\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\nconst DATA_URL = \"https://services.odata.org/V4/Northwind/Northwind.svc/Products\";\nconst EMPTY_STRING = \"\";\nconst NULL_VALUE = null;\nexport enum FILTER_OPERATION {\n    CONTAINS = \"contains\",\n    STARTS_WITH = \"startswith\",\n    ENDS_WITH = \"endswith\",\n    EQUALS = \"eq\",\n    DOES_NOT_EQUAL = \"ne\",\n    DOES_NOT_CONTAIN = \"not contains\",\n    GREATER_THAN = \"gt\",\n    LESS_THAN = \"lt\",\n    LESS_THAN_EQUAL = \"le\",\n    GREATER_THAN_EQUAL = \"ge\"\n}\n\n@Injectable()\nexport class RemoteFilteringService {\n    public remoteData: Observable<any[]>;\n    private _remoteData: BehaviorSubject<any[]>;\n\n    constructor(private _http: HttpClient) {\n        this._remoteData = new BehaviorSubject([]);\n        this.remoteData = this._remoteData.asObservable();\n    }\n\n    public getData(\n        virtualizationArgs?: IForOfState,\n        filteringArgs?: any,\n        sortingArgs?: any, cb?: (any) => void): any {\n        return this._http.get(this.buildDataUrl(\n            virtualizationArgs, filteringArgs, sortingArgs)).subscribe((data: any) => {\n                this._remoteData.next(data.value);\n                if (cb) {\n                    cb(data);\n                }\n            });\n    }\n\n    private buildDataUrl(virtualizationArgs: any, filteringArgs: any, sortingArgs: any): string {\n        let baseQueryString = `${DATA_URL}?$count=true`;\n        let scrollingQuery = EMPTY_STRING;\n        let orderQuery = EMPTY_STRING;\n        let filterQuery = EMPTY_STRING;\n        let query = EMPTY_STRING;\n        let filter = EMPTY_STRING;\n\n        if (sortingArgs) {\n            orderQuery = this._buildSortExpression(sortingArgs);\n        }\n\n        if (filteringArgs && filteringArgs.length > 0) {\n            filteringArgs.forEach((columnFilter) => {\n                if (filter !== EMPTY_STRING) {\n                    filter += ` ${FilteringLogic[FilteringLogic.And].toLowerCase()} `;\n                }\n\n                filter += this._buildAdvancedFilterExpression(\n                    columnFilter.filteringOperands,\n                    columnFilter.operator);\n            });\n\n            filterQuery = `$filter=${filter}`;\n        }\n\n        if (virtualizationArgs) {\n            scrollingQuery = this._buildScrollExpression(virtualizationArgs);\n        }\n\n        query += (orderQuery !== EMPTY_STRING) ? `&${orderQuery}` : EMPTY_STRING;\n        query += (filterQuery !== EMPTY_STRING) ? `&${filterQuery}` : EMPTY_STRING;\n        query += (scrollingQuery !== EMPTY_STRING) ? `&${scrollingQuery}` : EMPTY_STRING;\n\n        baseQueryString += query;\n\n        return baseQueryString;\n    }\n\n    private _buildAdvancedFilterExpression(operands, operator): string {\n        let filterExpression = EMPTY_STRING;\n        operands.forEach((operand) => {\n            const value = operand.searchVal;\n            const isNumberValue = (typeof (value) === \"number\") ? true : false;\n            const filterValue = (isNumberValue) ? value : `'${value}'`;\n            const fieldName = operand.fieldName;\n            let filterString;\n\n            if (filterExpression !== EMPTY_STRING) {\n                filterExpression += ` ${FilteringLogic[operator].toLowerCase()} `;\n            }\n\n            switch (operand.condition.name) {\n                case \"contains\": {\n                    filterString = `${FILTER_OPERATION.CONTAINS}(${fieldName}, ${filterValue})`;\n                    break;\n                }\n                case \"startsWith\": {\n                    filterString = `${FILTER_OPERATION.STARTS_WITH}(${fieldName},${filterValue})`;\n                    break;\n                }\n                case \"endsWith\": {\n                    filterString = `${FILTER_OPERATION.ENDS_WITH}(${fieldName},${filterValue})`;\n                    break;\n                }\n                case \"equals\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.EQUALS} ${filterValue} `;\n                    break;\n                }\n                case \"doesNotEqual\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.DOES_NOT_EQUAL} ${filterValue} `;\n                    break;\n                }\n                case \"doesNotContain\": {\n                    filterString = `${FILTER_OPERATION.DOES_NOT_CONTAIN}(${fieldName},${filterValue})`;\n                    break;\n                }\n                case \"greaterThan\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.GREATER_THAN} ${filterValue} `;\n                    break;\n                }\n                case \"greaterThanOrEqualTo\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.GREATER_THAN_EQUAL} ${filterValue} `;\n                    break;\n                }\n                case \"lessThan\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.LESS_THAN} ${filterValue} `;\n                    break;\n                }\n                case \"lessThanOrEqualTo\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.LESS_THAN_EQUAL} ${filterValue} `;\n                    break;\n                }\n                case \"empty\": {\n                    filterString = `length(${fieldName}) ${FILTER_OPERATION.EQUALS} 0`;\n                    break;\n                }\n                case \"notEmpty\": {\n                    filterString = `length(${fieldName}) ${FILTER_OPERATION.GREATER_THAN} 0`;\n                    break;\n                }\n                case \"null\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.EQUALS} ${NULL_VALUE}`;\n                    break;\n                }\n                case \"notNull\": {\n                    filterString = `${fieldName} ${FILTER_OPERATION.DOES_NOT_EQUAL} ${NULL_VALUE}`;\n                    break;\n                }\n            }\n\n            filterExpression += filterString;\n        });\n\n        return filterExpression;\n    }\n\n    private _buildSortExpression(sortingArgs): string {\n        let sortingDirection: string;\n        switch (sortingArgs.dir) {\n            case SortingDirection.None: {\n                sortingDirection = EMPTY_STRING;\n                break;\n            }\n            default: {\n                sortingDirection = SortingDirection[sortingArgs.dir].toLowerCase();\n                break;\n            }\n        }\n\n        return `$orderby=${sortingArgs.fieldName} ${sortingDirection}`;\n    }\n\n    private _buildScrollExpression(virtualizationArgs): string {\n        let requiredChunkSize: number;\n        const skip = virtualizationArgs.startIndex;\n        requiredChunkSize = virtualizationArgs.chunkSize === 0 ? 11 : virtualizationArgs.chunkSize;\n        const top = requiredChunkSize;\n\n        return `$skip=${skip}&$top=${top}`;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { RemoteFilteringSampleComponent } from \"./grid/grid-remote-filtering-sample/remote-filtering-sample.component\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxBadgeModule,\r\n\tIgxToastModule\r\n } from \"igniteui-angular\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { RemoteFilteringService } from \"./grid/services/remoteFilteringService\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tRemoteFilteringSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxGridModule.forRoot(),\r\n\t\tIgxBadgeModule,\r\n\t\tHttpClientModule,\r\n\t\tIgxToastModule\n  ],\n  providers: [RemoteFilteringService],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-grid-remote-filtering-sample></app-grid-remote-filtering-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}