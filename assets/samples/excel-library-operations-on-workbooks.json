{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/workbooks.component.ts","content":"import {\n    Component, ComponentFactoryResolver,\n    Injector, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\n// importing IG components:\nimport { IgxGridComponent } from \"igniteui-angular\";\nimport { TextFormatMode } from \"igniteui-angular-excel/ES5/TextFormatMode\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorksheetTable } from \"igniteui-angular-excel/ES5/WorksheetTable\";\n// importing IG utilities:\nimport {\n    WorkbookExportService\n} from \"../../utilities/excel-exporter\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    providers: [ WorkbookExportService ],\n    selector: \"app-workbooks\",\n    styleUrls: [\"./workbooks.component.scss\"],\n    templateUrl: \"./workbooks.component.html\"\n})\nexport class ExcelLibraryOperationsOnWorkbooksComponent implements OnInit {\n\n    @ViewChild(\"gridContainer\", {read: ViewContainerRef})\n    public gridContainerRef: ViewContainerRef;\n    // openPlaceholder = \"Choose Excel File:\";\n    public canSave = false;\n    public wb: Workbook;\n    public worksheetTables: string[];\n    public selectedTable: string;\n    // public data: any[];\n\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {\n    }\n\n    public ngOnInit() {\n        this.workbookCreate();\n    }\n\n    public workbookSave(): void {\n        if (this.canSave) {\n            // setting document properties to organize Excel files\n            this.wb.documentProperties.author = \"My Name\";\n            this.wb.documentProperties.company = \"My Company\";\n            this.wb.documentProperties.title = \"Employees and income\";\n            this.wb.documentProperties.status = \"Completed\";\n            this.wb.documentProperties.category = \"Financial\";\n            this.wb.documentProperties.keywords = \"Financial;Company;Employees;income\";\n\n            // setting protection on workbook of Excel file\n            this.wb.protection.allowEditStructure = true;\n            this.wb.protection.allowEditWindows = true;\n\n            this.wb.windowOptions.tabBarVisible = true;\n\n            ExcelUtility.save(this.wb, \"ExcelWorkbook\").then((f) => {\n                console.log(\"Saved:\" + f);\n            }, (e) => {\n                console.error(\"ExcelUtility.Save Error:\" + e);\n            });\n        }\n    }\n\n    public workbookLoad(input: HTMLInputElement): void {\n        if (input.files == null || input.files.length === 0) {\n            return;\n        }\n        console.log(\"Loaded:\" + input.files[0].name);\n        ExcelUtility.load(input.files[0]).then((w) => { this.workbookParse(w); },\n            (e) => {\n            console.error(\"ExcelUtility.Load Error:\" + e);\n        });\n    }\n\n    public workbookParse(wb: Workbook): void {\n        if (wb === undefined) {\n            this.worksheetTables = null;\n            this.selectedTable = null;\n        } else {\n            const names = new Array<string>();\n            for (const ws of wb.worksheets()) {\n                for (const tbl of ws.tables()) {\n                    names.push(ws.name + \" - \" + tbl.name);\n                }\n            }\n            this.worksheetTables = names;\n            this.selectedTable = names.length > 0 ? names[0] : null;\n        }\n        this.wb = wb;\n        this.canSave = wb != null;\n        this.onTableChange(this.selectedTable);\n    }\n\n    public workbookCreate(): void {\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const employeeSheet = wb.worksheets().add(\"Employees\");\n        const employeeHeader = employeeSheet.rows(0);\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\n        const titles = [\"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" ];\n        const employeeColumns = [\"Name\", \"Company\", \"Title\", \"Age\", \"Country\", \"Salary\" ];\n        for (let col = 0; col < employeeColumns.length; col++) {\n            employeeSheet.columns(col).width = 5000;\n            employeeHeader.setCellValue(col, employeeColumns[col]);\n        }\n\n        for (let i = 1; i < 20; i++) {\n            const company = this.getItem(companies);\n            const title = this.getItem(titles);\n            const country = this.getItem(countries);\n            const name = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const salary = this.getAmount(75000, 95000);\n            const age = this.getRandom(20, 65);\n            const wr = employeeSheet.rows(i);\n            wr.setCellValue(0, name);\n            wr.setCellValue(1, company);\n            wr.setCellValue(2, title);\n            wr.setCellValue(3, age);\n            wr.setCellValue(4, country);\n            wr.setCellValue(5, salary);\n        }\n        employeeSheet.tables().add(\"A1:F20\", true);\n\n        const expenseSheet = wb.worksheets().add(\"Expenses\");\n        const expanseHeader = expenseSheet.rows(0);\n        const expanseNames = [\"Year\", \"Computers\", \"Research\", \"Travel\", \"Salary\", \"Software\" ];\n        let expanseCol = 0;\n        for (const key of expanseNames) {\n            expenseSheet.columns(expanseCol).width = 5000;\n            expanseHeader.setCellValue(expanseCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = expenseSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(expanseCol, 2010 + i);\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(expanseCol, this.getAmount(50000, 65000));\n                } else if (key === \"Research\") {\n                    wr.setCellValue(expanseCol, this.getAmount(150000, 165000));\n                } else if (key === \"Travel\") {\n                    wr.setCellValue(expanseCol, this.getAmount(20000, 25000));\n                } else if (key === \"Salary\") {\n                    wr.setCellValue(expanseCol, this.getAmount(4000000, 450000));\n                } else if (key === \"Software\") {\n                    wr.setCellValue(expanseCol, this.getAmount(100000, 150000));\n                }\n            }\n            expanseCol++;\n        }\n        expenseSheet.tables().add(\"A1:F20\", true);\n\n        const incomeSheet = wb.worksheets().add(\"Income\");\n        const incomeHeader = incomeSheet.rows(0);\n        const incomeNames = [\"Year\", \"Phones\", \"Computers\", \"Software\", \"Services\", \"Royalties\" ];\n        let incomeCol = 0;\n        for (const key of incomeNames) {\n            incomeSheet.columns(incomeCol).width = 5000;\n            incomeHeader.setCellValue(incomeCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = incomeSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(incomeCol, 2010 + i);\n                } else if (key === \"Software\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 850000));\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(incomeCol, this.getAmount(250000, 265000));\n                } else if (key === \"Royalties\") {\n                    wr.setCellValue(incomeCol, this.getAmount(400000, 450000));\n                } else if (key === \"Phones\") {\n                    wr.setCellValue(incomeCol, this.getAmount(6000000, 650000));\n                } else if (key === \"Services\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 750000));\n                }\n            }\n            incomeCol++;\n        }\n        incomeSheet.tables().add(\"A1:F20\", true);\n        this.workbookParse(wb);\n    }\n\n    public onTableChange(newValue: string) {\n        if (!newValue) {\n            this.onTableSelected(null);\n        } else {\n            const parts = newValue.split(\" - \");\n            const worksheetName = parts[0];\n            const tableName = parts[1];\n            for (const ws of this.wb.worksheets()) {\n                if (ws.name === worksheetName) {\n                    for (const tbl of ws.tables()) {\n                        if (tbl.name === tableName) {\n                          this.onTableSelected(tbl);\n                          return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public onTableSelected(table: WorksheetTable) {\n        this.gridContainerRef.clear();\n\n        if (table) {\n            const headers = new Array<string>();\n            // expanseCollect the keys for the data\n            for (const expanseCol of table.columns()) {\n                headers.push(expanseCol.name);\n            }\n\n            const ws = table.worksheet;\n            const region = table.dataAreaRegion;\n            const data = new Array<any>();\n\n            for (let r = region.firstRow; r <= region.lastRow; r++) {\n                const row = {};\n                const excelRow = ws.rows(r);\n                for (let c = 0; c < headers.length; c++) {\n                    row[headers[c]] = excelRow.getCellText(c + region.firstColumn, TextFormatMode.IgnoreCellWidth);\n                }\n                data.push(row);\n            }\n\n            const gridFactory = this.resolver.resolveComponentFactory(IgxGridComponent);\n            const gridRef = this.gridContainerRef.createComponent(gridFactory);\n            gridRef.instance.autoGenerate = true;\n            gridRef.instance.data = data;\n        }\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n    public getAmount(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return \"$\" + s.replace(\".00\", \"\");\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/workbooks.component.html","content":"<div >\n    <div class=\"workbookOptions\">\n\n        <div class=\"workbookOperations\">\n            <button class=\"workbookButton\" (click)=\"workbookCreate()\">\n                <label>Create Workbook</label>\n            </button>\n            <button class=\"workbookButton\" (click)=\"workbookSave()\" [disabled]=\"!canSave\">\n                <label>Save Workbook</label>\n            </button>\n            <div class=\"workbookSelector\">\n                <button class=\"workbookButton\">\n                    <label for=\"workbookSelector\">Load Workbook</label>\n                </button>\n                <input class=\"workbookButton\" id=\"workbookSelector\" type=\"file\" style=\"visibility:hidden;\"\n                    accept=\".xls, .xlt, .xlsx, .xlsm, .xltm, .xltx\"\n                    (change)='workbookLoad($event.target)' >\n            </div>\n        </div>\n        <div class=\"workbookDetails\">\n            <label class=\"label\">Select Table:</label>\n            <select size=\"3\" [(ngModel)]=\"selectedTable\" (ngModelChange)=\"onTableChange($event)\">\n                <option *ngFor=\"let tblName of worksheetTables\">\n                    {{tblName}}\n                </option>\n            </select>\n        </div>\n    </div>\n\n    <div class=\"workbookPreview\">\n        <label class=\"label\"> Data Preview: </label>\n        <template #gridContainer></template>\n    </div>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/workbooks.component.scss","content":".workbookOptions {\n    display: \"block\";\n    width: 100%;\n}\n\n.workbookOperations {\n    width: 160px;\n    padding-left: 5px;\n    padding-right: 5px;\n    float:left;\n}\n\n.workbookDetails {\n    float:left;\n    width: 70%;\n    height: 100px;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.workbookDetails > select {\n    display: inline-block;\n    width: 100%;\n    height: 90px;\n}\n\n.label {\n    margin-top: 8px;\n    font-weight: bold;\n}\n\n.workbookPreview {\n    display: inline-block;\n    padding-left: 5px;\n    padding-right: 5px;\n    width: 100%;\n    height: 200px;\n}\n\n.workbookButton {\n    display: block;\n    width: 150px;\n    margin-top: 5px;\n}\n\n.workbookSelector {\n    display: inline-block;\n    width: 150px;\n    margin-top: 5px;\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryOperationsOnWorkbooksComponent } from \"./excel-library/operations-on/workbooks.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryOperationsOnWorkbooksComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-workbooks></app-workbooks>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}