{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.ts","content":"import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from \"@angular/core\";\n// importing IG components:\nimport { IgxGridComponent } from \"igniteui-angular\";\nimport { SparklineType } from \"igniteui-angular-excel/ES5/SparklineType\";\nimport { Worksheet } from \"igniteui-angular-excel/ES5/Worksheet\";\nimport { WorksheetRegion } from \"igniteui-angular-excel/ES5/WorksheetRegion\";\nimport {\n    IWorkbookExportEndedEventArgs,\n    IWorksheetCellExportingEventArgs,\n    IWorksheetRowExportedEventArgs,\n    WorkbookExportOptions,\n    WorkbookExportService\n} from \"../../utilities/excel-exporter\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [ WorkbookExportService ],\n    selector: \"app-sparklines\",\n    styleUrls: [\"./sparklines.component.css\"],\n    templateUrl: \"./sparklines.component.html\"\n})\nexport class ExcelLibraryWorkingWithSparklinesComponent implements OnInit {\n\n    @ViewChild(\"grid\", { read: IgxGridComponent })\n    public grid: IgxGridComponent;\n    public data: any[];\n    public exportAsTable: boolean = true;\n\n    constructor(private exporter: WorkbookExportService) {\n        exporter.onWorksheetCellExporting.subscribe({ next: (e: IWorksheetCellExportingEventArgs) => {\n            if (e.dataColumnHeader === \"Order History\") {\n                let wsOrderDetails: Worksheet;\n                const details = e.cellValue as any[];\n                e.cellValue = null;\n                // the grid only contains flat data but we need the child data to provide\n                // the values for the sparkline. to do that we will store those rows manually\n                // on another worksheet\n                if (!e.row.workbook.worksheets().exists(\"OrderDetails\")) {\n                    wsOrderDetails = e.row.workbook.worksheets().add(\"OrderDetails\");\n                    const headerRow = wsOrderDetails.rows(0);\n                    headerRow.setCellValue(0, \"Customer ID\");\n                    headerRow.setCellValue(1, \"Order ID\");\n                    headerRow.setCellValue(2, \"Freight\");\n                } else {\n                    wsOrderDetails = e.row.workbook.worksheets(\"OrderDetails\");\n                }\n\n                let rowIdx = wsOrderDetails.rows().count;\n                const startRowIdx = rowIdx;\n                for (const detail of details) {\n                    const detailRow = wsOrderDetails.rows(rowIdx);\n                    detailRow.setCellValue(0, detail.CustomerID);\n                    detailRow.setCellValue(1, detail.OrderID);\n                    detailRow.setCellValue(2, detail.Freight);\n                    rowIdx++;\n                }\n\n                const region = new WorksheetRegion(wsOrderDetails, startRowIdx, 2, rowIdx - 1, 2, false);\n                const dataRegion = region.toString(e.row.workbook.cellReferenceMode, true, true, true);\n\n                if (e.row.worksheet.sparklineGroups().count === 0) {\n                    const cells = e.row.cells(e.worksheetColumnIndex).toString();\n                    e.row.worksheet.sparklineGroups().add(SparklineType.Column, cells, dataRegion);\n                } else {\n                    e.row.worksheet.sparklineGroups(0).sparklines().add(e.row.index,\n                        e.worksheetColumnIndex, dataRegion);\n                }\n            }\n        }});\n\n        exporter.onWorksheetRowExported.subscribe({ next: (e: IWorksheetRowExportedEventArgs) => {\n            e.row.height = 1000;\n        }});\n\n        exporter.onWorkbookExportEnded.subscribe({ next: (e: IWorkbookExportEndedEventArgs) => {\n            for (let c = e.dataRegion.firstColumn; c <= e.dataRegion.lastColumn; c++) {\n                e.worksheet.columns(c).autoFitWidth();\n            }\n            ExcelUtility.save(e.workbook, e.fileName);\n        }});\n    }\n\n    public exportGrid() {\n        const opt = new WorkbookExportOptions(\"grid_sparklines\");\n        opt.exportAsTable = this.exportAsTable;\n        this.exporter.export(this.grid, opt);\n    }\n\n    public ngOnInit(): void {\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\", \"Novak\" ];\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\" ];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\" ];\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\" ];\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\" ];\n        const shippings = [\"Federal Ex\", \"UPS Air\", \"UPS Ground\" ];\n\n        const data = new Array<any>();\n        // generating excel data source\n        for (let i = 0; i < 10; i++) {\n            const companyName = this.getItem(companies);\n            const contactTitle = this.getItem(titles);\n            const country = this.getItem(countries);\n            const city = this.getItem(cities);\n            const shipping = this.getItem(shippings);\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const employeeName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\n            const customerID = \"CID-\" + this.getRandom(500, 900);\n            const phone = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\n            const fax = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\n\n            const companyOrders = new Array<any>();\n            for (let o = 0; o < 6; o++) {\n                const reqDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const shipDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const orderDate = \"2020-05-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const order = {\n                    ContactName: contactName,\n                    CustomerID: customerID,\n                    EmployeeID: this.getRandom(1000, 8000),\n                    EmployeeName: employeeName,\n                    Freight: this.getRandom(1, 10),\n                    OrderDate: orderDate,\n                    OrderID: this.getRandom(3000, 5000),\n                    RequiredDate: reqDate,\n                    ShipAddress: address,\n                    ShipCity: city,\n                    ShipCountry: country,\n                    ShipName: companyName,\n                    ShipPostalCode: postalCode,\n                    ShipRegion: null,\n                    ShipVia: this.getRandom(1, 10),\n                    ShippedDate: shipDate,\n                    ShipperID: this.getRandom(1, 10),\n                    ShipperName: shipping,\n                    TotalItems: this.getRandom(10, 20),\n                    TotalPrice: this.getRandom(400, 600)\n                };\n                companyOrders.push(order);\n            }\n            const dataItem = {\n                Address: address,\n                City: city,\n                CompanyName: companyName,\n                ContactName: contactName,\n                ContactTitle: contactTitle,\n                Country: country,\n                Fax: fax,\n                ID: customerID,\n                Orders: companyOrders,\n                Phone: phone,\n                PostalCode: postalCode,\n                Region: null\n            };\n            data.push(dataItem);\n        }\n        this.data = data;\n\n    }\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.html","content":"<div class=\"sample-wrapper container\">\n    <div class=\"options\">\n        <input type=\"checkbox\" id=\"exportAsTable\" [(ngModel)]=\"exportAsTable\">\n        <label for=\"exportAsTable\">Export As Table </label>\n        <button (click)=\"exportGrid()\">Export to Excel</button>\n    </div>\n    <igx-grid #grid [data]=\"data\" [autoGenerate]=\"false\" height=\"500px\" width=\"100%\">\n        <igx-column field=\"Orders\" header=\"Order History\" resizable=true>\n            <ng-template igxCell let-cell=\"cell\" let-val>\n                <igx-data-chart\n                  width=\"100%\"\n                  height=\"100%\"\n                  [dataSource]=\"val\"\n                  isHorizontalZoomEnabled=\"false\"\n                  isVerticalZoomEnabled=\"false\">\n                  <igx-category-x-axis\n                    label=\"Label\"\n                    labelVisibility=\"collapsed\"\n                    #xAxis>\n                  </igx-category-x-axis>\n                  <igx-numeric-y-axis\n                    minimumValue=\"0\"\n                    labelVisibility=\"collapsed\"\n                    #yAxis\n                    majorStroke=\"transparent\">\n                  </igx-numeric-y-axis>\n                  <igx-column-series\n                    [xAxis]=\"xAxis\"\n                    [yAxis]=\"yAxis\"\n                    outline=\"#376092\"\n                    brush=\"#376092\"\n                    valueMemberPath=\"Freight\">\n                  </igx-column-series>\n              </igx-data-chart>\n            </ng-template>\n          </igx-column>\n        <igx-column field=\"CompanyName\" header=\"Company Name\"></igx-column>\n        <igx-column field=\"ContactName\" header=\"Contact Name\"></igx-column>\n        <igx-column field=\"ContactTitle\" header=\"Contact Title\"></igx-column>\n        <igx-column field=\"Country\" header=\"Country\"></igx-column>\n    </igx-grid>\n</div>\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.css","content":".container {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n  min-width: 300px; }\n\n.options {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-right: 10px;\n  margin-left: 10px; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { IgxDataChartCategoryModule } from \"igniteui-angular-charts/ES5/igx-data-chart-category-module\";\r\nimport { IgxDataChartCoreModule } from \"igniteui-angular-charts/ES5/igx-data-chart-core-module\";\r\nimport { IgxDataChartInteractivityModule } from \"igniteui-angular-charts/ES5/igx-data-chart-interactivity-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithSparklinesComponent } from \"./excel-library/working-with/sparklines.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryWorkingWithSparklinesComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule,\r\n\t\tIgxDataChartCategoryModule,\r\n\t\tIgxDataChartCoreModule,\r\n\t\tIgxDataChartInteractivityModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-sparklines></app-sparklines>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}