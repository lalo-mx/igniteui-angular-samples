{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.ts","content":"import {\n    AfterViewInit, ChangeDetectionStrategy, Component\n} from \"@angular/core\";\nimport { Color } from \"igniteui-angular-core/ES5/Color\";\n\nimport {\n    CustomFilterCondition,\n    ExcelComparisonOperator,\n    FormatConditionTextOperator,\n    OrderedSortCondition,\n    RelativeIndex,\n    SortDirection,\n    WorkbookColorInfo\n} from \"igniteui-angular-excel/ES5/excel.core\";\n\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-worksheets\",\n    styleUrls: [\"./worksheets.component.css\"],\n    templateUrl: \"./worksheets.component.html\"\n})\nexport class ExcelLibraryOperationsOnWorksheetsComponent implements AfterViewInit {\n\n    // TODO if needed, uncomment to get access to IG control\n    // @ViewChild(\"chart\")\n    // public chart: IgxCategoryChartComponent;\n    // @ViewChild(\"chart\")\n    // public chart: IgxDataChartComponent;\n    // @ViewChild(\"grid\")\n    // public chart: IgxGridComponent;\n\n    public data: any;\n    public isSorted: boolean;\n    public isFiltered: boolean;\n    public isProtected: boolean;\n    public showGridlines: boolean;\n    public showHeaders: boolean;\n    public applyConditionalFormatting: boolean;\n    public workbook: Workbook;\n\n    constructor() {\n        this.showGridlines = true;\n        this.showHeaders = true;\n    }\n\n    public ngOnInit() {\n    }\n\n    public ngAfterViewInit(): void {\n        // TODO bind excel data to the chart\n        // this.chart.dataSource = this.data;\n    }\n\n    public initData(): void {\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\"];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\"];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\"];\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\"];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\"];\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\"];\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\"];\n        const headers = [\"Company Name\",\n            \"Contact Title\",\n            \"Country\",\n            \"City\",\n            \"Contact Name\",\n            \"Address\",\n            \"Postal Code\",\n            \"Customer ID\",\n            \"Salary\",\n            \"Age\"];\n        const dataSource = new Array<any>();\n        // generating excel data source\n        this.workbook = new Workbook(WorkbookFormat.Excel2007);\n        const sheet = this.workbook.worksheets().add(\"Sheet1\");\n\n        for (let i = 0; i < headers.length; i++) {\n            sheet.rows(0).cells(i).value = headers[i];\n        }\n\n        for (let i = 1; i < 20; i++) {\n            const companyName = this.getItem(companies);\n            const contactTitle = this.getItem(titles);\n            const country = this.getItem(countries);\n            const city = this.getItem(cities);\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\n            const customerID = \"CID-\" + this.getRandom(500, 900);\n            const salary = this.getSalary(85000, 200000);\n            const age = this.getRandom(20, 65);\n            const dataItem = [\n                companyName,\n                contactTitle,\n                country,\n                city,\n                contactName,\n                address,\n                postalCode,\n                customerID,\n                salary,\n                age\n            ];\n            for (let j = 0; j < dataItem.length; j++) {\n                sheet.rows(i).cells(j).value = dataItem[j];\n            }\n        }\n    }\n\n    public exportData() {\n        this.initData();\n        const sheet = this.workbook.worksheets(0);\n        sheet.defaultColumnWidth = 220 * 20;\n\n        if (this.isSorted) {\n            sheet.sortSettings.setRegion(\"A1:A20\");\n            sheet.sortSettings.sortConditions().addItem(\n                new RelativeIndex(0), new OrderedSortCondition(SortDirection.Ascending));\n        }\n        if (this.isFiltered) {\n            sheet.filterSettings.setRegion(\"C1:C20\");\n            sheet.filterSettings.applyCustomFilter(0, new CustomFilterCondition(ExcelComparisonOperator.Equals, \"USA\"));\n        }\n        if (this.isProtected) {\n            sheet.protect();\n        }\n        if (!this.showHeaders) {\n            sheet.displayOptions.showRowAndColumnHeaders = false;\n        }\n        if (!this.showGridlines) {\n            sheet.displayOptions.showGridlines = false;\n        }\n        if (this.applyConditionalFormatting) {\n            const green = new Color();\n            green.colorString = \"Green\";\n\n            const blue = new Color();\n            blue.colorString = \"Blue\";\n\n            const orange = new Color();\n            orange.colorString = \"Orange\";\n\n            const format = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"Amazon\", FormatConditionTextOperator.Contains);\n\n            const format2 = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"IBM\", FormatConditionTextOperator.Contains);\n\n            const format3 = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"Tesla\", FormatConditionTextOperator.Contains);\n\n            format.cellFormat.font.colorInfo = new WorkbookColorInfo(green);\n            format2.cellFormat.font.colorInfo = new WorkbookColorInfo(blue);\n            format3.cellFormat.font.colorInfo = new WorkbookColorInfo(orange);\n        }\n\n        ExcelUtility.save(this.workbook, \"worksheetsSample\");\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n    public getSalary(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return \"$\" + s.replace(\".00\", \"\");\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.html","content":"<div class=\"sample-wrapper container\">\n    <div class=\"options\">\n        <button class=\"optionItem\" (click)=\"exportData()\">Export Excel File with Settings</button>\n        <label class=\"optionItem\"><input [(ngModel)]=\"isSorted\" type=\"checkbox\" />Apply Sort</label>\n        <label class=\"optionItem\"><input [(ngModel)]=\"isFiltered\" type=\"checkbox\" />Apply Filter</label>\n        <label class=\"optionItem\"><input [(ngModel)]=\"isProtected\" type=\"checkbox\" />Protect Worksheet</label>\n        <label class=\"optionItem\"><input [(ngModel)]=\"showGridlines\" type=\"checkbox\" />Show Gridlines</label>\n        <label class=\"optionItem\"><input [(ngModel)]=\"showHeaders\" type=\"checkbox\" />Show Row and Column Headers</label>\n        <label class=\"optionItem\"><input [(ngModel)]=\"applyConditionalFormatting\" type=\"checkbox\" />Apply Conditional Formatting</label>\n    </div>\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.css","content":".container {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n  min-width: 300px; }\n\n.options {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-right: 10px;\n  margin-left: 10px; }\n\n.optionItem {\n  margin-left: 10px;\n  display: inline-block;\n  vertical-align: center; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\nimport { Workbook } from \"igniteui-angular-excel/ES5/Workbook\";\nimport { WorkbookFormat } from \"igniteui-angular-excel/ES5/WorkbookFormat\";\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel/ES5/WorkbookSaveOptions\";\n\nexport class ExcelUtility {\n    public static getExtension(format: WorkbookFormat) {\n        switch (format) {\n            case WorkbookFormat.StrictOpenXml:\n            case WorkbookFormat.Excel2007:\n                return \".xlsx\";\n            case WorkbookFormat.Excel2007MacroEnabled:\n                return \".xlsm\";\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\n                return \".xltm\";\n            case WorkbookFormat.Excel2007Template:\n                return \".xltx\";\n            case WorkbookFormat.Excel97To2003:\n                return \".xls\";\n            case WorkbookFormat.Excel97To2003Template:\n                return \".xlt\";\n        }\n    }\n\n    public static load(file: File): Promise<Workbook> {\n        return new Promise<Workbook>((resolve, reject) => {\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\n                Workbook.load(a, null, (w) => {\n                    resolve(w);\n                }, (e) => {\n                    reject(e);\n                });\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const opt = new WorkbookSaveOptions();\n            opt.type = \"blob\";\n\n            workbook.save(opt, (d) => {\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\n                const fileName = fileNameWithoutExtension + fileExt;\n                saveAs(d as Blob, fileName);\n                resolve(fileName);\n            }, (e) => {\n                reject(e);\n            });\n        });\n    }\n\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            const fr = new FileReader();\n            fr.onerror = (e) => {\n                reject(fr.error);\n            };\n\n            if (fr.readAsBinaryString) {\n                fr.onload = (e) => {\n                    const rs = (fr as any).resultString;\n                    const str: string = rs != null ? rs : fr.result;\n                    const result = new Uint8Array(str.length);\n                    for (let i = 0; i < str.length; i++) {\n                        result[i] = str.charCodeAt(i);\n                    }\n                    resolve(result);\n                };\n                fr.readAsBinaryString(file);\n            } else {\n                fr.onload = (e) => {\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\n                };\n                fr.readAsArrayBuffer(file);\n            }\n        });\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel/ES5/igx-excel-module\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryOperationsOnWorksheetsComponent } from \"./excel-library/operations-on/worksheets.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tExcelLibraryOperationsOnWorksheetsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxButtonModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxGridModule,\r\n\t\tIgxExcelModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-worksheets></app-worksheets>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-core\":\"6.2.2\",\"igniteui-angular-excel\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}