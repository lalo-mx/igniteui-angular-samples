{"sampleFiles":[{"hasRelativeAssetsUrls":true,"path":"src/app/drag-drop/drag-drop.component.ts","content":"import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { IgxDialogComponent } from \"igniteui-angular\";\n\n@Component({\n    selector: \"drag-drop-sample\",\n    styleUrls: [\"./drag-drop.component.css\"],\n    templateUrl: \"./drag-drop.component.html\"\n})\n\nexport class DragAndDropSampleComponent implements OnInit {\n    public tiles = [];\n    public puzzleBoard;\n    public readonly boardEdgeLength: number = 3;\n    public readonly successfullMessage: string = \"You have successfully solved the puzzle.\";\n\n    @ViewChild(\"alert\")\n    public dialog: IgxDialogComponent;\n\n    private tilesArr = [\n        {\n            id: 0, url: \"assets/images/drag-drop/infragistics-logo00.jpeg\"\n        },\n        {\n            id: 1, url: \"assets/images/drag-drop/infragistics-logo01.jpeg\"\n        },\n        {\n            id: 2, url: \"assets/images/drag-drop/infragistics-logo02.jpeg\"\n        },\n        {\n            id: 3, url: \"assets/images/drag-drop/infragistics-logo10.jpeg\"\n        },\n        {\n            id: 4, url: \"assets/images/drag-drop/infragistics-logo11.jpeg\"\n        },\n        {\n            id: 5, url: \"assets/images/drag-drop/infragistics-logo12.jpeg\"\n        },\n        {\n            id: 6, url: \"assets/images/drag-drop/infragistics-logo20.jpeg\"\n        },\n        {\n            id: 7, url: \"assets/images/drag-drop/infragistics-logo21.jpeg\"\n        },\n        {\n            id: 8, url: \"assets/images/drag-drop/infragistics-logo22.jpeg\"\n        }\n    ];\n\n    constructor() {\n    }\n\n    public ngOnInit() {\n        this.puzzleBoard = [];\n        this.shuffleArray();\n    }\n\n    public onTileDropped(ev) {\n        const dropIdString = ev.owner.element.nativeElement.id;\n        const dragIdString = ev.drag.element.nativeElement.id;\n        const dropId = dropIdString.match(/\\d+/g).map(Number)[0];\n        const dragId = dragIdString.match(/\\d+/g).map(Number)[0];\n\n        const foundIndex = this.findIndexOfDrag(dragId);\n        const firstPartRow = foundIndex.row;\n        const firstPartColl = foundIndex.coll;\n        const secondPartRow = Math.floor(dropId / this.boardEdgeLength);\n        const secondPartColl = dropId % this.boardEdgeLength;\n        this.swapTiles(firstPartRow, firstPartColl, secondPartRow, secondPartColl);\n        ev.cancel = true;\n        ev.drag.dropFinished();\n        if (this.checkForCompletedPuzzle()) {\n            setTimeout(function() {\n                this.showMessage(this.dialog);\n            }, 100);\n        }\n    }\n\n    private showMessage(dialog) {\n        dialog.open();\n    }\n\n    private swapTiles(firstPartRow, firstPartColl, secondPartRow, secondPartColl) {\n        const temp = this.puzzleBoard[firstPartRow][firstPartColl];\n        this.puzzleBoard[firstPartRow][firstPartColl] = this.puzzleBoard[secondPartRow][secondPartColl];\n        this.puzzleBoard[secondPartRow][secondPartColl] = temp;\n\n        const temp2 = this.tiles[firstPartRow][firstPartColl];\n        this.tiles[firstPartRow][firstPartColl] = this.tiles[secondPartRow][secondPartColl];\n        this.tiles[secondPartRow][secondPartColl] = temp2;\n    }\n\n    private findIndexOfDrag(dragId) {\n        for (let i = 0; i < this.boardEdgeLength; i++) {\n            for (let j = 0; j < this.boardEdgeLength; j++) {\n                if (this.puzzleBoard[i][j] === dragId) {\n                    return { row: i, coll: j };\n                }\n            }\n        }\n    }\n\n    private checkForCompletedPuzzle(): boolean  {\n        for (let i = 0; i < this.boardEdgeLength; i++) {\n            for (let j = 0; j < this.boardEdgeLength; j++) {\n                if (this.puzzleBoard[i][j] !== (i * this.boardEdgeLength + j)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private shuffleArray(): void {\n        for (let i = this.tilesArr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = this.tilesArr[i];\n            this.tilesArr[i] = this.tilesArr[j];\n            this.tilesArr[j] = temp;\n        }\n\n        for (let i = 0; i < this.boardEdgeLength; i++) {\n            this.tiles.push([]);\n            this.puzzleBoard.push([]);\n            for (let j = 0; j < this.boardEdgeLength; j++) {\n                this.tiles[i].push(this.tilesArr[i * this.boardEdgeLength + j]);\n                this.puzzleBoard[i].push(this.tilesArr[i * this.boardEdgeLength + j].id);\n            }\n        }\n    }\n\n    private getBorderClasses(row, coll) {\n        let classes = \"\";\n        if (row === 0 || row === this.boardEdgeLength - 1) {\n            classes += \"top_bottom_edge \";\n        }\n\n        if (coll === 0 || coll === this.boardEdgeLength - 1) {\n            classes += \"left_right_edge\";\n        }\n\n        return classes;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/drag-drop/drag-drop.component.html","content":"<div class=\"puzzle_board_wrapper\">\n    <div class=\"outside_container\" *ngFor=\"let row of tiles; let i = index\">\n        <div [id]=\"'drop_' + ((i * boardEdgeLength) + j)\" igxDrop (onDrop)=\"onTileDropped($event)\" class=\"inside_container {{getBorderClasses(i, j)}}\" *ngFor=\"let piece of row; let j = index\">\n            <div igxDrag id=\"drag_{{piece.id}}\" class=\"puzzle_part_container\" [hideBaseOnDrag]=\"true\" [ghostImageClass]=\"'drag_ghost_class'\">\n                <img class=\"puzzle_part\" width=\"100px\" height=\"100px\" [src]=\"piece.url\" draggable=\"false\" onmousedown=\"if (event.preventDefault) event.preventDefault()\" />\n            </div>\n        </div>\n    </div>\n    <igx-dialog #alert title=\"Congratulations!\" message=\"{{successfullMessage}}\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\">\n    </igx-dialog>\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/drag-drop/drag-drop.component.css","content":".puzzle_part_container {\n  padding: 0px;\n  width: 100px;\n  height: 100px; }\n\n.drag_ghost_class {\n  border: 1px #616161 solid; }\n\n.puzzle_part {\n  -moz-user-select: none;\n  width: 99px;\n  height: 99px;\n  padding: 1px; }\n\n.puzzle_board_wrapper {\n  margin: 20px; }\n\n.outside_container {\n  display: flex;\n  flex-flow: row;\n  height: 100px; }\n\n.inside_container {\n  width: 100px;\n  height: 100px; }\n\n.left_right_edge {\n  border-left: 1px #616161 solid;\n  border-right: 1px #616161 solid; }\n\n.top_bottom_edge {\n  border-top: 1px #616161 solid;\n  border-bottom: 1px #616161 solid; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxDragDirective,\r\n\tIgxDropDirective,\r\n\tIgxDragDropModule\r\n } from \"igniteui-angular\";\r\nimport { DragAndDropSampleComponent } from \"./drag-drop/drag-drop.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tDragAndDropSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxDragDropModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<drag-drop-sample></drag-drop-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}