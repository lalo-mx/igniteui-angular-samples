{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/list-chat-sample/list-chat-sample.component.ts","content":"import { DOCUMENT } from \"@angular/common\";\nimport { Component, Inject, TemplateRef, ViewChild, ViewEncapsulation } from \"@angular/core\";\n// import { IgxListComponent } from \"igniteui-angular\";\nimport { ContactsService } from \"./services/contacts.service\";\nimport { IMessage, MessagesService } from \"./services/messages.service\";\n\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    selector: \"app-list-chat-sample\",\n    styleUrls: [\"./list-chat-sample.component.css\"],\n    templateUrl: \"./list-chat-sample.component.html\"\n})\nexport class ListChatSampleComponent {\n    public message: string;\n    @ViewChild(\"myMessage\")\n    public myMessageTemplate: TemplateRef<any>;\n    @ViewChild(\"othersMessage\")\n    public othersMessageTemplate: TemplateRef<any>;\n    // @ViewChild(\"list\")\n    // public listComponent: IgxListComponent;\n\n    private myId: number = 4;\n\n    constructor(public messagesService: MessagesService, public contactsService: ContactsService,\n                @Inject(DOCUMENT) private document: any) { }\n\n    public getMessageTemplate(message: IMessage): TemplateRef<any> {\n        if (message.authorId === this.myId) {\n            return this.myMessageTemplate;\n        }\n\n        return this.othersMessageTemplate;\n    }\n\n    public isFirstMessage(messageIndex: number): boolean {\n        if (messageIndex === 0) {\n            return true;\n        }\n\n        const messages = this.messagesService.getMessages();\n        if (messageIndex >= messages.length) {\n            return false;\n        }\n\n        const currentMessage = messages[messageIndex];\n        const previousMessage = messages[messageIndex - 1];\n\n        return currentMessage.authorId !== previousMessage.authorId;\n    }\n\n    public onMessageKeypress(event) {\n        if (event.key === \"Enter\") {\n            this.sendMessage();\n        }\n    }\n\n    public onSendButtonClick() {\n        this.sendMessage();\n    }\n\n    private sendMessage() {\n        this.addMessage(this.message);\n        this.message = null;\n\n        this.scrollToBottom();\n    }\n\n    private addMessage(message: string) {\n        if (message) {\n            const messageInstance: IMessage = {\n                authorId: this.myId,\n                message,\n                timestamp: new Date(Date.now())\n            };\n            this.messagesService.addMessage(messageInstance);\n        }\n    }\n\n    private scrollToBottom(): void {\n        try {\n            const listElement = this.document.querySelector(\"igx-list\");\n            if (listElement) {\n                listElement.scrollTop = listElement.scrollHeight;\n            }\n\n            // this.listComponent.element.nativeElement.scrollTop =\n            // this.listComponent.element.nativeElement.scrollHeight;\n        } catch (err) { }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/list-chat-sample/list-chat-sample.component.html","content":"<div class=\"chat-sample-wrapper\">\n    <form class=\"chat-sample__form\">\n        <igx-list #list>\n            <ng-template #othersMessage let-message=\"message\" let-contact=\"contact\" let-messageIndex=\"index\">\n                <igx-list-item class=\"contact\" *ngIf=\"isFirstMessage(messageIndex)\">\n                    <div class=\"contact__panel\">\n                        <igx-avatar [src]=\"contact.photo\" roundShape=\"true\"></igx-avatar>\n                        <span class=\"message__info\">\n                            {{ contact.name }}, {{ message.timestamp | date: 'shortTime'}}\n                        </span>\n                    </div>\n                </igx-list-item>\n                <igx-list-item [ngClass]=\"{\n                    'others-message': true,\n                    'others-message--first': isFirstMessage(messageIndex)}\">\n                    <span>\n                        {{ message.message }}\n                    </span>\n                </igx-list-item>\n            </ng-template>\n            <ng-template #myMessage let-message=\"message\" let-messageIndex=\"index\">\n                <igx-list-item class=\"contact\" *ngIf=\"isFirstMessage(messageIndex)\">\n                    <span class=\"my-message__info\">\n                        {{ message.timestamp | date: 'shortTime'}}\n                    </span>\n                </igx-list-item>\n                <igx-list-item class=\"my-message\" [ngClass]=\"{\n                    'my-message': true,\n                    'my-message--first': isFirstMessage(messageIndex)}\">\n                    <span>\n                        {{ message.message }}\n                    </span>\n                </igx-list-item>\n            </ng-template>\n\n            <ng-container *ngFor=\"let message of messagesService.getMessages(); index as i\">\n                <ng-container *ngTemplateOutlet=\"getMessageTemplate(message); context: {message: message, contact: contactsService.getContact(message.authorId), index: i}\">\n                </ng-container>\n            </ng-container>\n        </igx-list>\n\n        <div class=\"chat-massage-field\">\n            <igx-input-group class=\"chat-input-group\" type=\"box\">\n                <input class=\"input-round-box\" placeholder=\"Send message\" autocomplete=\"off\" igxInput #newMessage name=\"newMessage\"\n                    [(ngModel)]=\"message\" (keypress)=\"onMessageKeypress($event)\" />\n            </igx-input-group>\n            <button class=\"send-message-button\" igxButton=\"icon\" igxButtonColor=\"#09f\" igxButtonBackground=\"#fff\"\n                igxRipple=\"#09f\" igxRipple igxRippleCentered=\"true\" (click)=\"onSendButtonClick()\">\n                <igx-icon fontSet=\"material\">send</igx-icon>\n            </button>\n        </div>\n    </form>\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/list-chat-sample/list-chat-sample.component.css","content":".chat-sample-wrapper {\n  margin: 0 auto;\n  height: 100%;\n  padding-bottom: 50px; }\n\n.chat-sample__form {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: relative; }\n\nigx-icon {\n  cursor: pointer;\n  user-select: none; }\n\n.igx-input-group--border .igx-input-group__bundle,\n.igx-input-group--border .igx-input-group__bundle:hover,\n.igx-input-group--border .igx-input-group__bundle:focus,\n.igx-input-group--focused.igx-input-group--border .igx-input-group__bundle,\n.igx-input-group--focused,\n.igx-input-group__bundle:focus,\n.igx-input-group__bundle,\n.igx-input-group:focus {\n  box-shadow: none;\n  outline: none; }\n\n.igx-input-group--border .igx-input-group__bundle {\n  padding: 4px 0; }\n\n.igx-list {\n  position: relative;\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: #fff;\n  height: 100%;\n  overflow: auto;\n  z-index: 0;\n  flex: 1 0 0%;\n  padding-bottom: 10px; }\n\n.chat-massage-field {\n  display: flex;\n  align-items: center;\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  padding: 0 8px;\n  height: 50px;\n  margin: 0 auto;\n  border-top: 1px solid #ddd;\n  background: #fff; }\n\n.chat-sample-wrapper .input-round-box {\n  transform: translateY(0);\n  font-size: 14px; }\n\n.chat-sample-wrapper .igx-input-group__bundle-main {\n  padding: 0; }\n\n.chat-sample-wrapper .chat-input-group {\n  flex: 1 0 0%;\n  height: 40px;\n  display: flex;\n  align-items: center; }\n\n.chat-sample-wrapper .igx-input-group__wrapper {\n  flex: 1; }\n\n.chat-sample-wrapper .igx-input-group--box .igx-input-group__bundle {\n  padding: 0 8px; }\n\n.send-message-button {\n  margin-left: 8px; }\n\n.igx-list__item-base:active,\n.igx-list__item-base {\n  padding: 0;\n  min-height: 36px;\n  user-select: auto !important; }\n\n.others-message .igx-list__item-content,\n.my-message .igx-list__item-content {\n  font-weight: 600;\n  min-height: 16px;\n  border-radius: 4px;\n  margin: 0 0 4px 16px;\n  padding: 4px 8px;\n  font-size: 12px;\n  font-weight: 300; }\n\n.igx-list__item-content {\n  padding: .5rem 0; }\n\n.others-message--first .igx-list__item-content {\n  border-top-left-radius: 0; }\n\n.my-message--first .igx-list__item-content {\n  border-top-right-radius: 0; }\n\n.others-message:active .igx-list__item-content,\n.others-message .igx-list__item-content {\n  align-self: flex-start;\n  background-color: #09f;\n  color: white; }\n\n.my-message:active .igx-list__item-content,\n.my-message .igx-list__item-content {\n  align-self: flex-end;\n  background-color: #f0f0f0; }\n\n.my-message .igx-list__item-content {\n  margin-right: 16px; }\n\n.message__info {\n  margin-left: 10px;\n  font-weight: 400; }\n\n.my-message__info {\n  margin-top: 20px;\n  font-weight: 400;\n  text-align: right; }\n\n.contact:active {\n  background: transparent; }\n\n.contact {\n  margin: 20px 16px 5px 16px; }\n\n.contact__panel {\n  display: flex;\n  align-items: center;\n  padding: 0; }\n\n@media only screen and (min-width: 960px) {\n  .chat-sample-wrapper {\n    max-width: 400px;\n    max-height: 600px;\n    margin: 20px auto;\n    padding: 0;\n    border: 1px solid #ddd;\n    box-shadow: 0 0 10px #999; }\n  .chat-massage-field {\n    max-width: 400px;\n    position: static;\n    padding-bottom: 0; } }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/list-chat-sample/services/contacts.service.ts","content":"import { Injectable } from \"@angular/core\";\nexport interface IContact {\n    id: number;\n    name: string;\n    phone: string;\n    photo: string;\n}\n@Injectable({\n    providedIn: \"root\"\n})\n\nexport class ContactsService {\n    private _contacts: IContact[] = [\n        {\n            id: 1,\n            name: \"Terrance Orta\",\n            phone: \"770-504-2217\",\n            photo: \"https://randomuser.me/api/portraits/men/27.jpg\"\n        },\n        {\n            id: 2,\n            name: \"Richard Mahoney\",\n            phone: \"423-676-2869\",\n            photo: \"https://randomuser.me/api/portraits/men/1.jpg\"\n        },\n        {\n            id: 3,\n            name: \"Donna Price\",\n            phone: \"859-496-2817\",\n            photo: \"https://randomuser.me/api/portraits/women/50.jpg\"\n        },\n        {\n            id: 4,\n            name: \"Lisa Landers\",\n            phone: \"901-747-3428\",\n            photo: \"https://randomuser.me/api/portraits/women/3.jpg\"\n        },\n        {\n            id: 5,\n            name: \"Dorothy H. Spencer\",\n            phone: \"573-394-9254\",\n            photo: \"https://randomuser.me/api/portraits/women/67.jpg\"\n        }\n    ];\n\n    public getMockContacts(): IContact[] {\n        return this._contacts;\n    }\n\n    public getContact(id: number): IContact {\n        return this.getMockContacts().find((contact) => contact.id === id);\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/list-chat-sample/services/messages.service.ts","content":"import { Injectable } from \"@angular/core\";\nexport interface IMessage {\n    authorId: number;\n    timestamp: Date;\n    message: string;\n}\n@Injectable({\n    providedIn: \"root\"\n})\n\nexport class MessagesService {\n    private mockMessages: IMessage[] = [\n        {\n            authorId: 1,\n            message: \"Hi guys\",\n            timestamp: new Date(2018, 9, 4, 15, 0)\n\n        },\n        {\n            authorId: 1,\n            message: \"How are you?\",\n            timestamp: new Date(2018, 9, 4, 15, 1)\n        },\n        {\n            authorId: 2,\n            message: \"Hi dude\",\n            timestamp: new Date(2018, 9, 4, 15, 3)\n        },\n        {\n            authorId: 2,\n            message: \"I'm fine. Thank you!\",\n            timestamp: new Date(2018, 9, 4, 15, 3)\n        },\n        {\n            authorId: 2,\n            message: \"I hope you too?\",\n            timestamp: new Date(2018, 9, 4, 15, 3)\n        },\n        {\n            authorId: 4,\n            message: \"Hello\",\n            timestamp: new Date(2018, 9, 4, 15, 10)\n        },\n        {\n            authorId: 4,\n            message: \"I'm Lisa\",\n            timestamp: new Date(2018, 9, 4, 15, 10)\n        },\n        {\n            authorId: 4,\n            message: \"and I just joined the company\",\n            timestamp: new Date(2018, 9, 4, 15, 10)\n        },\n        {\n            authorId: 5,\n            message: \"Hi Lisa\",\n            timestamp: new Date(2018, 9, 4, 15, 12)\n        },\n        {\n            authorId: 5,\n            message: \"Welcome to the party :)\",\n            timestamp: new Date(2018, 9, 4, 15, 13)\n        }\n    ];\n\n    public getMessages(): IMessage[] {\n        return this.mockMessages;\n    }\n\n    public addMessage(message: IMessage) {\n        if (message) {\n            this.mockMessages.push(message);\n        }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxAvatarModule,\r\n\tIgxIconModule,\r\n\tIgxListModule,\r\n\tIgxInputGroupModule\r\n } from \"igniteui-angular\";\r\nimport { ListChatSampleComponent } from \"./list-chat-sample/list-chat-sample.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tListChatSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxAvatarModule,\r\n\t\tIgxIconModule,\r\n\t\tIgxListModule,\r\n\t\tIgxInputGroupModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-list-chat-sample></app-list-chat-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}