{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-4/grid-sample-4.component.ts","content":"import { ChangeDetectorRef, Component, TemplateRef, ViewChild } from \"@angular/core\";\nimport { IgxColumnComponent, IgxGridComponent } from \"igniteui-angular\";\nimport { RemoteServiceVirt } from \"../services/remoteService\";\n\n@Component({\n    providers: [RemoteServiceVirt],\n    selector: \"grid-remote-virtualization-sample\",\n    styleUrls: [\"grid-sample-4.component.css\"],\n    templateUrl: \"grid-sample-4.component.html\"\n})\n\nexport class GridRemoteVirtualizationSampleComponent {\n    public remoteData: any;\n\n    @ViewChild(\"grid\") public grid: IgxGridComponent;\n    @ViewChild(\"remoteDataLoadingLarge\", { read: TemplateRef })\n    protected remoteDataLoadingLargeTemplate: TemplateRef<any>;\n    @ViewChild(\"remoteDataLoadingMedium\", { read: TemplateRef })\n    protected remoteDataLoadingMediumTemplate: TemplateRef<any>;\n    @ViewChild(\"remoteDataLoadingSmall\", { read: TemplateRef })\n    protected remoteDataLoadingSmallTemplate: TemplateRef<any>;\n\n    private _columnCellCustomTemplates: Map<IgxColumnComponent, TemplateRef<any>>;\n    private _isColumnCellTemplateReset: boolean = false;\n    private _prevRequest: any;\n\n    constructor(private _remoteService: RemoteServiceVirt, public cdr: ChangeDetectorRef) { }\n\n    public ngOnInit(): void {\n        this.remoteData = this._remoteService.data;\n        this._columnCellCustomTemplates = new Map<IgxColumnComponent, TemplateRef<any>>();\n    }\n\n    public ngAfterViewInit() {\n        this._remoteService.getData(this.grid.virtualizationState, this.grid.sortingExpressions[0], true, (data) => {\n            this.grid.totalItemCount = data[\"@odata.count\"];\n        });\n    }\n\n    public processData(reset) {\n        if (this._prevRequest) {\n            this._prevRequest.unsubscribe();\n        }\n\n        if (this.grid.columns.length > 0) {\n            this.grid.columns.forEach((column: IgxColumnComponent) => {\n                if (column.bodyTemplate && !this._isColumnCellTemplateReset) {\n                    this._columnCellCustomTemplates.set(column, column.bodyTemplate);\n                }\n\n                column.bodyTemplate = this.getDataLoadingTemplate();\n            });\n\n            this._isColumnCellTemplateReset = true;\n        }\n\n        this._prevRequest = this._remoteService.getData(this.grid.virtualizationState,\n            this.grid.sortingExpressions[0], reset, () => {\n                if (this._isColumnCellTemplateReset) {\n                    let oldTemplate;\n                    this.grid.columns.forEach((column: IgxColumnComponent) => {\n                        oldTemplate = this._columnCellCustomTemplates.get(column);\n                        column.bodyTemplate = oldTemplate;\n                    });\n                    this._columnCellCustomTemplates.clear();\n                    this._isColumnCellTemplateReset = false;\n                }\n\n                this.cdr.detectChanges();\n            });\n    }\n\n    public formatNumber(value: number) {\n        return value.toFixed(2);\n    }\n\n    public formatCurrency(value: number) {\n        return \"$\" + value.toFixed(2);\n    }\n\n    public ngOnDestroy() {\n        if (this._prevRequest) {\n            this._prevRequest.unsubscribe();\n        }\n    }\n\n    private getDataLoadingTemplate(): TemplateRef<any> {\n        const val = Math.floor(Math.random() * 3) + 1;\n\n        switch (val) {\n            case 1: return this.remoteDataLoadingLargeTemplate;\n            case 2: return this.remoteDataLoadingMediumTemplate;\n            case 3: return this.remoteDataLoadingSmallTemplate;\n        }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-4/grid-sample-4.component.html","content":"<div class=\"grid__wrapper\">\n    <ng-template #remoteDataLoadingLarge>\n        <div class=\"remote-data-loading-template-large\"></div>\n    </ng-template>\n    <ng-template #remoteDataLoadingMedium>\n        <div class=\"remote-data-loading-template-medium\"></div>\n    </ng-template>\n    <ng-template #remoteDataLoadingSmall>\n        <div class=\"remote-data-loading-template-small\"></div>\n    </ng-template>\n\n    <igx-grid #grid [data]=\"remoteData | async\" [height]=\"'500px'\" [width]=\"'100%'\" [autoGenerate]='false' (onDataPreLoad)=\"processData(false)\"\n        (onSortingDone)=\"processData(true)\">\n        <igx-column [field]=\"'ProductID'\" [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'ProductName'\" [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'UnitPrice'\" [dataType]=\"'number'\" [formatter]=\"formatCurrency\" [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'UnitsInStock'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\" [sortable]=\"true\">\n            <ng-template igxHeader>\n                <span class=\"cellAlignSyle\">UnitsInStock</span>\n            </ng-template>\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>50\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<=50\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>50\" [class.down]=\"val<=50\">{{ formatNumber(val) }}</span>\n                </div>\n            </ng-template>\n        </igx-column>\n        <igx-column [field]=\"'QuantityPerUnit'\" [sortable]=\"true\"></igx-column>\n        <igx-column [field]=\"'ReorderLevel'\" [dataType]=\"'number'\" [headerClasses]=\"'headerAlignSyle'\" [sortable]=\"true\">\n            <ng-template igxHeader>\n                <span class=\"cellAlignSyle\">ReorderLevel</span>\n            </ng-template>\n            <ng-template igxCell let-val>\n                <div class=\"currency-badge-container\">\n                    <igx-badge *ngIf=\"val>20\" type=\"success\" position=\"bottom-right\" icon=\"arrow_upward\" class=\"badge-left\"></igx-badge>\n                    <igx-badge *ngIf=\"val<=20\" type=\"error\" position=\"bottom-right\" icon=\"arrow_downward\" class=\"error badge-left\"></igx-badge>\n                    <span class=\"cellAlignSyle\" [class.up]=\"val>0\" [class.down]=\"val<=0\">{{ formatNumber(val) }}</span>\n                </div>\n            </ng-template>\n        </igx-column>\n    </igx-grid>\n</div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-sample-4/grid-sample-4.component.css","content":".grid__wrapper {\n  margin: 0 auto;\n  padding: 5px; }\n\n.cellAlignSyle {\n  text-align: right;\n  float: right; }\n\n.cellAlignSyle > span {\n  float: right; }\n\n.up {\n  color: green; }\n\n.down {\n  color: red; }\n\n.headerAlignSyle {\n  text-align: right !important; }\n\n.currency-badge-container {\n  width: 80px;\n  float: right; }\n\n.badge-left {\n  float: left; }\n\n.remote-data-loading-template, .remote-data-loading-template-medium, .remote-data-loading-template-large, .remote-data-loading-template-small {\n  background-color: lightgrey;\n  height: 15px; }\n\n.remote-data-loading-template-medium {\n  width: 30px; }\n\n.remote-data-loading-template-large {\n  width: 40px; }\n\n.remote-data-loading-template-small {\n  width: 20px; }\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/services/remoteService.ts","content":"import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { IForOfState, SortingDirection } from \"igniteui-angular\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\nconst DATA_URL: string = \"https://services.odata.org/V4/Northwind/Northwind.svc/Products\";\nconst EMPTY_STRING: string = \"\";\nexport enum SortOrder {\n    ASC = \"asc\",\n    DESC = \"desc\",\n    NONE = \"\"\n}\n\n@Injectable()\nexport class RemoteServiceVirt {\n    public data: Observable<any[]>;\n    private _data: BehaviorSubject<any[]>;\n    private _cachedData: any[];\n\n    constructor(private _http: HttpClient) {\n        this._data = new BehaviorSubject([]);\n        this.data = this._data.asObservable();\n    }\n\n    public getData(virtualizationArgs?: IForOfState, sortingArgs?: any, resetData?: boolean, cb?: (any) => void): any {\n        const startIndex = virtualizationArgs.startIndex;\n        const endIndex = virtualizationArgs.chunkSize + startIndex;\n        let areAllItemsInCache = true;\n\n        if (resetData) {\n            this._http.get(this._buildDataUrl(virtualizationArgs, sortingArgs)).subscribe((data: any) => {\n                this._cachedData = new Array<any>(data[\"@odata.count\"]).fill(null);\n                this._updateData(data, startIndex);\n                if (cb) {\n                    cb(data);\n                }\n            });\n\n            return;\n        }\n\n        for (let i = startIndex; i < endIndex; i++) {\n            if (this._cachedData[i] === null) {\n                areAllItemsInCache = false;\n                break;\n            }\n        }\n\n        if (!areAllItemsInCache) {\n            this._http.get(this._buildDataUrl(virtualizationArgs, sortingArgs)).subscribe((data: any) => {\n                this._updateData(data, startIndex);\n                if (cb) {\n                    cb(data);\n                }\n            });\n        } else {\n            const data = this._cachedData.slice(startIndex, endIndex);\n            this._data.next(data);\n            if (cb) {\n                cb(data);\n            }\n        }\n    }\n\n    private _updateData(data: any, startIndex: number) {\n        this._data.next(data.value);\n        for (let i = 0; i < data.value.length; i++) {\n            this._cachedData[i + startIndex] = data.value[i];\n        }\n    }\n\n    private _buildDataUrl(virtualizationArgs: any, sortingArgs: any): string {\n        let baseQueryString = `${DATA_URL}?$count=true`;\n        let scrollingQuery = EMPTY_STRING;\n        let orderQuery = EMPTY_STRING;\n        let query = EMPTY_STRING;\n\n        if (sortingArgs) {\n            let sortingDirection: string;\n            switch (sortingArgs.dir) {\n                case SortingDirection.Asc:\n                    sortingDirection = SortOrder.ASC;\n                    break;\n                case SortingDirection.Desc:\n                    sortingDirection = SortOrder.DESC;\n                    break;\n                default:\n                    sortingDirection = SortOrder.NONE;\n            }\n\n            orderQuery = `$orderby=${sortingArgs.fieldName} ${sortingDirection}`;\n        }\n\n        if (virtualizationArgs) {\n            let requiredChunkSize: number;\n            const skip = virtualizationArgs.startIndex;\n            requiredChunkSize = virtualizationArgs.chunkSize === 0 ? 11 : virtualizationArgs.chunkSize;\n            const top = requiredChunkSize;\n            scrollingQuery = `$skip=${skip}&$top=${top}`;\n        }\n\n        query += (orderQuery !== EMPTY_STRING) ? `&${orderQuery}` : EMPTY_STRING;\n        query += (scrollingQuery !== EMPTY_STRING) ? `&${scrollingQuery}` : EMPTY_STRING;\n\n        baseQueryString += query;\n\n        return baseQueryString;\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { GridRemoteVirtualizationSampleComponent } from \"./grid/grid-sample-4/grid-sample-4.component\";\r\nimport { \r\n\tIgxGridModule,\r\n\tIgxToastModule,\r\n\tIgxBadgeModule\r\n } from \"igniteui-angular\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { RemoteServiceVirt } from \"./grid/services/remoteService\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tGridRemoteVirtualizationSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxGridModule.forRoot(),\r\n\t\tIgxToastModule,\r\n\t\tIgxBadgeModule,\r\n\t\tHttpClientModule\n  ],\n  providers: [RemoteServiceVirt],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<grid-remote-virtualization-sample></grid-remote-virtualization-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}