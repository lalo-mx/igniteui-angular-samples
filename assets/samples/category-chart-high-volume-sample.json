{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-volume/category-chart-high-volume-sample.component.ts","content":"import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    ViewChild\n} from \"@angular/core\";\n\nimport { AssigningCategoryStyleEventArgs } from \"igniteui-angular-charts/ES5/igx-assigning-category-style-event-args\";\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts/ES5/igx-category-chart-component\";\nimport { ChartSeriesEventArgs } from \"igniteui-angular-charts/ES5/igx-chart-series-event-args\";\nimport {\n    IgxHorizontalAnchoredCategorySeriesComponent\n} from \"igniteui-angular-charts/ES5/igx-horizontal-anchored-category-series-component\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-category-chart-high-volume-sample\",\n    styleUrls: [\"./category-chart-high-volume-sample.component.scss\"],\n    templateUrl: \"./category-chart-high-volume-sample.component.html\"\n})\nexport class CategoryChartHighVolumeComponent implements AfterViewInit, OnDestroy {\n    @Input()\n    public scalingRatio: number = 1;\n\n    @ViewChild(\"chart\")\n    public chart: IgxCategoryChartComponent;\n\n    @ViewChild(\"loadTimeSpan\")\n    public loadTimeSpan: ElementRef;\n\n    private currValue: number = 15;\n    private currIndex: number = 0;\n\n    private _maxPoints: number = 500000;\n\n    private _refreshMilliseconds: number = 10;\n    private _interval: number = -1;\n    private _frames: number = 0;\n    private _time: Date;\n    private _assigningData: boolean = false;\n    private _data: any[];\n\n    constructor(private _zone: NgZone) {\n        this._data = this.generateData();\n    }\n\n    public onGenerateDataClicked() {\n        this._data = this.generateData();\n    }\n\n    public onAssignDataClicked() {\n        this._time = new Date();\n        this._assigningData = true;\n        this.chart.dataSource = this._data;\n    }\n\n    public onMaxPointsChanged(val: string) {\n        let num: number = parseInt(val, 10);\n        if (isNaN(num)) {\n            num = 5000;\n        }\n        if (num < 5000) {\n            num = 5000;\n        }\n        if (num > 2000000) {\n            num = 2000000;\n        }\n        this.maxPoints = num;\n    }\n\n    public get maxPointsText(): string {\n        return this.toShortString(this._maxPoints);\n    }\n\n    public get maxPoints(): number {\n        return this._maxPoints;\n    }\n    @Input()\n    public set maxPoints(v: number) {\n        this._maxPoints = v;\n    }\n\n    public ngOnDestroy(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n            window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this.chart.seriesAdded.subscribe((args: { sender: any, args: ChartSeriesEventArgs }) => {\n            const cat = args.args.series as IgxHorizontalAnchoredCategorySeriesComponent;\n            cat.isCustomCategoryStyleAllowed = true;\n            cat.assigningCategoryStyle.subscribe((event: { sender: any, args: AssigningCategoryStyleEventArgs }) => {\n                if (this._assigningData) {\n                    this._assigningData = false;\n\n                    this._zone.runOutsideAngular(() => {\n                        window.setTimeout(() => {\n                            const elapsed = new Date().getTime() - this._time.getTime();\n                            this.loadTimeSpan.nativeElement.textContent = \"Load Time: \" + elapsed.toFixed(2) + \"ms\";\n                        }, 0);\n                    });\n                }\n            });\n        });\n\n        this.chart.seriesRemoved.subscribe((event: { sender: any, args: ChartSeriesEventArgs }) => {\n            const cat = event.args.series as IgxHorizontalAnchoredCategorySeriesComponent;\n            cat.isCustomCategoryStyleAllowed = false;\n            cat.assigningCategoryStyle.unsubscribe();\n        });\n\n        this.chart.dataSource = this._data;\n    }\n\n    private generateData(): any[] {\n        const data: any[] = [];\n        for (this.currIndex = 0; this.currIndex <= this.maxPoints; this.currIndex++) {\n            this.currValue += Math.random() * 4.0 - 2.0;\n            const label = this.toShortString(this.currIndex);\n            data.push({ Label: label, Value: this.currValue });\n        }\n        return data;\n    }\n\n    private toShortString(largeValue: number): string {\n        let roundValue: number;\n\n        if (largeValue >= 1000000) {\n            roundValue = Math.round(largeValue / 100000) / 10;\n            return roundValue + \"m\";\n        }\n        if (largeValue >= 1000) {\n            roundValue = Math.round(largeValue / 100) / 10;\n            return roundValue + \"k\";\n        }\n\n        roundValue = Math.round(largeValue);\n        return roundValue + \"\";\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-volume/category-chart-high-volume-sample.component.html","content":"<div class=\"sample-container\">\n        <igx-category-chart\n          yAxisLabelExtent=\"40\"\n          #chart>\n        </igx-category-chart>\n\n        <div class=\"sample-controls\">\n          <span #loadTimeSpan class=\"load-time\">Load Time: </span>\n          <button igxButton=\"raised\"\n            igxRipple=\"white\"\n            (click)=\"onGenerateDataClicked()\"\n          >Generate Data</button>\n          <button igxButton=\"raised\"\n            igxRipple=\"white\"\n            (click)=\"onAssignDataClicked()\"\n          >Assign Data</button>\n\n          <div class=\"max-points-slider\">\n            <span class=\"label\">Data amount: {{ maxPointsText }}</span>\n            <igx-slider id=\"slider\"\n                minValue=\"5000\"\n                maxValue=\"2000000\"\n                [value]=\"maxPoints\"\n                [isContinuous]=true\n                (onValueChange)=\"onMaxPointsChanged($event.value)\">\n            </igx-slider>\n          </div>\n        </div>\n    </div>"},{"hasRelativeAssetsUrls":false,"path":"src/app/category-chart/high-volume/category-chart-high-volume-sample.component.scss","content":".max-points-slider {\n    margin-left: 5px;\n    display: inline-block;\n    width: 180px;\n    vertical-align: middle;\n  }\n.sample-container {\nwidth: 100%;\nheight: 550px;\n}\n.sample-controls {\nheight: 50px;\n}\nigx-category-chart {\n    width: 100%;\n    height: calc(100% - 50px);\n}\n.label {\n    margin-left: 10px;\n    margin-right: 5px;\n}\n.load-time {\n  display: inline-block;\n  width: 160px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts/ES5/igx-category-chart-module\";\r\nimport { CategoryChartHighVolumeComponent } from \"./category-chart/high-volume/category-chart-high-volume-sample.component\";\r\nimport { IgxSliderModule } from \"igniteui-angular\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tCategoryChartHighVolumeComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxCategoryChartModule,\r\n\t\tIgxSliderModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-category-chart-high-volume-sample></app-category-chart-high-volume-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-charts\":\"6.2.2\",\"igniteui-angular-core\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}