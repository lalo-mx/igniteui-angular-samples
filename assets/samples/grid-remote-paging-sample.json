{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-paging-sample/remote-paging-sample.component.ts","content":"import { AfterViewInit, ChangeDetectorRef, Component, OnDestroy, OnInit, TemplateRef, ViewChild } from \"@angular/core\";\nimport { IgxGridComponent } from \"igniteui-angular\";\nimport { Observable } from \"rxjs\";\nimport { RemotePagingService } from \"../services/remotePagingService\";\n@Component({\n    providers: [RemotePagingService],\n    selector: \"remote-paging-grid-sample\",\n    styleUrls: [\"./remote-paging-sample.component.scss\"],\n    templateUrl: \"./remote-paging-sample.component.html\"\n})\nexport class RemotePagingGridSample implements OnInit, AfterViewInit, OnDestroy {\n\n    public page = 0;\n    public lastPage = false;\n    public firstPage = true;\n    public totalPages: number = 1;\n    public totalCount = 0;\n    @ViewChild(\"customPager\", { read: TemplateRef })\n    public remotePager: TemplateRef<any>;\n\n    @ViewChild(\"grid1\")\n    public grid1: IgxGridComponent;\n    public title = \"gridPaging\";\n    public data: Observable<any[]>;\n\n    public get perPage(): number {\n        return this._perPage;\n    }\n\n    public set perPage(val: number) {\n        this._perPage = val;\n        this.paginate(0, true);\n    }\n\n    private _perPage = 10;\n    private _dataLengthSubscriber;\n\n    constructor(\n        private remoteService: RemotePagingService) {\n    }\n\n    public ngOnInit() {\n        this.data = this.remoteService.remoteData.asObservable();\n        this._dataLengthSubscriber = this.remoteService.getDataLength().subscribe((data) => {\n            this.totalCount = data;\n            this.totalPages = Math.ceil(data / this.perPage);\n            this.buttonDeselection(this.page, this.totalPages);\n        });\n    }\n\n    public ngOnDestroy() {\n        if (this._dataLengthSubscriber) {\n            this._dataLengthSubscriber.unsubscribe();\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.remoteService.getData(0, this.perPage);\n        this.grid1.paginationTemplate = this.remotePager;\n    }\n\n    public nextPage() {\n        this.firstPage = false;\n        this.page++;\n        const skip = this.page * this.perPage;\n        const top = this.perPage;\n        this.remoteService.getData(skip, top);\n        if (this.page + 1 >= this.totalPages) {\n            this.lastPage = true;\n        }\n    }\n\n    public previousPage() {\n        this.lastPage = false;\n        this.page--;\n        const skip = this.page * this.perPage;\n        const top = this.perPage;\n        this.remoteService.getData(skip, top);\n        if (this.page <= 0) {\n            this.firstPage = true;\n        }\n    }\n\n    public paginate(page: number, recalc: true) {\n        this.page = page;\n        const skip = this.page * this.perPage;\n        const top = this.perPage;\n        if (recalc) {\n            this.totalPages = Math.ceil(this.totalCount / this.perPage);\n        }\n        this.remoteService.getData(skip, top);\n        this.buttonDeselection(this.page, this.totalPages);\n    }\n\n    public buttonDeselection(page: number, totalPages: number) {\n        if (totalPages === 1) {\n            this.lastPage = true;\n            this.firstPage = true;\n        } else if (page + 1 >= totalPages) {\n            this.lastPage = true;\n            this.firstPage = false;\n        } else {\n            this.lastPage = false;\n            this.firstPage = true;\n        }\n    }\n\n    public parseToInt(val) {\n        return parseInt(val, 10);\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-paging-sample/remote-paging-sample.component.html","content":"<p class=\"grid__wrapper\">\n    <igx-grid #grid1 [data]=\"data | async\" width=\"960px\" height=\"550px\" [paging]=\"true\" [perPage]=\"perPage\">\n        <igx-column field=\"ID\"></igx-column>\n        <igx-column field=\"ProductName\"></igx-column>\n        <igx-column field=\"QuantityPerUnit\"></igx-column>\n        <igx-column field=\"SupplierName\"></igx-column>\n        <igx-column field=\"UnitsInStock\"></igx-column>\n        <igx-column field=\"Rating\"></igx-column>\n    </igx-grid>\n    <ng-template #customPager let-api>\n        <button [disabled]=\"firstPage\" (click)=\"paginate(0, false)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n            <igx-icon fontSet=\"material\">first_page</igx-icon>\n        </button>\n        <button [disabled]=\"firstPage\" (click)=\"previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n            <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n        </button>\n        <span>{{ page + 1 }} of {{totalPages}}</span>\n        <button [disabled]=\"lastPage\" (click)=\"nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n            <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n        </button>\n        <button [disabled]=\"lastPage\" (click)=\"paginate(totalPages - 1, false)\" igxButton=\"icon\" igxRipple\n            igxRippleCentered=\"true\">\n            <igx-icon fontSet=\"material\">last_page</igx-icon>\n        </button>\n        <select style=\"margin-left: 1rem;\" (change)=\"perPage = parseToInt($event.target.value);\">\n            <option [value]=\"val\" [selected]=\"perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val\n                }}</option>\n        </select>\n    </ng-template>\n</p>"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/grid-remote-paging-sample/remote-paging-sample.component.scss","content":".grid__wrapper {\n    margin: 0 16px;\n    padding-top: 10px;\n}"},{"hasRelativeAssetsUrls":false,"path":"src/app/grid/services/remotePagingService.ts","content":"import { HttpClient} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable()\nexport class RemotePagingService {\n    public remoteData: BehaviorSubject<any[]>;\n    public dataLenght: BehaviorSubject<number> = new BehaviorSubject(0);\n    public url = \"https://www.igniteui.com/api/products\";\n\n    constructor(private http: HttpClient) {\n        this.remoteData = new BehaviorSubject([]);\n    }\n\n    public getData(index?: number, perPage?: number): any {\n        let qS = \"\";\n\n        if (perPage) {\n            qS = `?$skip=${index}&$top=${perPage}&$count=true`;\n        }\n\n        this.http\n            .get(`${this.url + qS}`).pipe(\n                map((data: any) => {\n                    return data;\n                })\n            ).subscribe((data) => this.remoteData.next(data));\n    }\n\n    public getDataLength(): any {\n        return this.http.get(this.url).pipe(\n            map((data: any) => {\n                return data.length;\n            })\n        );\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { RemotePagingGridSample } from \"./grid/grid-remote-paging-sample/remote-paging-sample.component\";\r\nimport { IgxGridModule } from \"igniteui-angular\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { RemoteService } from \"./grid/services/remote.service\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tRemotePagingGridSample\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxGridModule.forRoot(),\r\n\t\tHttpClientModule\n  ],\n  providers: [RemoteService],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<remote-paging-grid-sample></remote-paging-grid-sample>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/http\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@angular/router\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"immediate\":\"^3.2.3\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}