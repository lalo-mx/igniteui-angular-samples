{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/financial-chart/high-frequency/financial-chart-high-frequency.component.ts","content":"import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    ViewChild\n} from \"@angular/core\";\nimport { IgxFinancialChartComponent } from \"igniteui-angular-charts/ES5/igx-financial-chart-component\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-financial-chart-high-frequency\",\n    styleUrls: [\"./financial-chart-high-frequency.component.css\"],\n    templateUrl: \"./financial-chart-high-frequency.component.html\"\n})\nexport class FinancialChartHighFrequencyComponent implements AfterViewInit, OnDestroy {\n    public data: any[];\n\n    @ViewChild(\"chart\")\n    public chart: IgxFinancialChartComponent;\n\n    private currValue: number = 150;\n    private currIndex: number = 0;\n    private currDate: Date = new Date(2018, 3, 1);\n\n    private _maxPoints: number = 250;\n\n    private _refreshMilliseconds: number = 100;\n    private _interval: number = -1;\n    private _frames: number = 0;\n    private _time: Date;\n\n    constructor(private _zone: NgZone) {\n        this.data = this.generateData();\n    }\n\n    public onRefreshFrequencyChanged(val: string) {\n        let num: number = parseInt(val, 10);\n        if (isNaN(num)) {\n            num = 10;\n        }\n        if (num <= 0) {\n            num = 10;\n        }\n        if (num > 50000) {\n            num = 50000;\n        }\n        this._refreshMilliseconds = num;\n        this.setupInterval();\n    }\n\n    public get maxPoints(): number {\n        return this._maxPoints;\n    }\n\n    public get refreshMilliseconds(): number {\n        return this._refreshMilliseconds;\n    }\n\n    public ngOnDestroy(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n                window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this._time = new Date();\n        this.setupInterval();\n    }\n\n    private setupInterval(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n                window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n\n        this._zone.runOutsideAngular(() => {\n            this._interval = window.setInterval(() => this.tick(),\n            this.refreshMilliseconds);\n        });\n    }\n\n    private generateData(): any[] {\n        const data: any[] = [];\n        for (this.currIndex = 0; this.currIndex < this.maxPoints; this.currIndex++) {\n            this.currValue += Math.random() * 4.0 - 2.0;\n            data.push(this.getValue());\n        }\n        return data;\n    }\n\n    private addHours(date: Date, hours: number): Date {\n        return new Date(date.getTime() + hours * 60 * 60 * 1000);\n    }\n\n    private getValue(): any {\n        const o = this.currValue + ((Math.random() - 0.5) * 1);\n        const h = this.currValue + (Math.random() * 2);\n        const l = this.currValue - (Math.random() * 2);\n        const c = this.currValue + ((Math.random() - 0.5) * 2);\n        const v = this.currValue * 10000 + ((Math.random() - 0.5) * 50000);\n        const newVal = { Date: this.currDate, Open: o, High: h, Low: l, Close: c, Volume: v };\n        return newVal;\n    }\n\n    private tick(): void {\n        this.currValue += Math.random() * 4.0 - 2.0;\n        this.currIndex++;\n        this.currDate = this.addHours(this.currDate, 1);\n        const newVal = this.getValue();\n        const oldVal = this.data[0];\n\n        this.data.push(newVal);\n        this.chart.notifyInsertItem(this.data, this.data.length - 1, newVal);\n        this.data.shift();\n        this.chart.notifyRemoveItem(this.data, 0, oldVal);\n\n        this._frames++;\n        const currTime = new Date();\n        const elapsed = (currTime.getTime() - this._time.getTime());\n        if (elapsed > 5000) {\n            const fps = this._frames / (elapsed / 1000.0);\n            this._time = currTime;\n            this._frames = 0;\n        }\n    }\n}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/financial-chart/high-frequency/financial-chart-high-frequency.component.html","content":"<igx-financial-chart height=\"100%\" width=\"100%\"\n    [dataSource]=\"data\"\n    chartType=\"candle\"\n    zoomSliderType=\"candle\"\n    volumeType=\"area\"\n    #chart>\n</igx-financial-chart>\n      <!-- yAxisLabelExtent=\"40\" -->"},{"hasRelativeAssetsUrls":false,"path":"src/app/financial-chart/high-frequency/financial-chart-high-frequency.component.css","content":""},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxFinancialChartModule } from \"igniteui-angular-charts/ES5/igx-financial-chart-module\";\r\nimport { FinancialChartHighFrequencyComponent } from \"./financial-chart/high-frequency/financial-chart-high-frequency.component\";\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\r\n\t\tFinancialChartHighFrequencyComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\r\n\t\tIgxFinancialChartModule\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class AppModule {}\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-financial-chart-high-frequency></app-financial-chart-high-frequency>"}],"sampleDependencies":"{\"@angular/animations\":\"7.1.1\",\"@angular/common\":\"7.1.1\",\"@angular/compiler\":\"7.1.1\",\"@angular/core\":\"7.1.1\",\"@angular/forms\":\"7.1.1\",\"@angular/platform-browser\":\"7.1.1\",\"@angular/platform-browser-dynamic\":\"7.1.1\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.4.1\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"7.1.0\",\"igniteui-angular-charts\":\"6.2.2\",\"igniteui-angular-core\":\"6.2.2\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.3.3\",\"tslib\":\"^1.9.0\",\"web-animations-js\":\"^2.3.1\",\"zone.js\":\"^0.8.26\"}"}